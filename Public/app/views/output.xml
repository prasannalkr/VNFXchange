<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180713 12:31:35.689" generator="Robot 3.0.2 (Python 2.7.10 on win32)">
<suite source="C:\xampp\htdocs\VNFXchange\Genric_Script\SBC_Onboarding_TestCases.robot" id="s1" name="SBC Onboarding TestCases">
<test id="s1-t1" name="TC1_Verification of on-boarded vnf on RHOSP">
<kw name="ImportDetails" library="Genric_Keywords">
<arguments>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Server}</var>
</assign>
<kw name="Parseconfdata" library="Library">
<arguments>
<arg>${ConfigPath}</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Param}</var>
</assign>
<msg timestamp="20180713 12:31:39.901" level="INFO">@{Param} = [ "RedHat" | Test_REQ | SBC | qcow2 | /root/auto_heatfiles | bare | C:\xampp\htdocs\VNFXchange | nova:compute1 | default | TCP | Ingress | ipv4 | Oracle_SBC_Flavour_Template.txt | nnSCZ739p1-img-vm_kv...</msg>
<status status="PASS" endtime="20180713 12:31:39.901" starttime="20180713 12:31:39.900"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${server}</var>
</assign>
<msg timestamp="20180713 12:31:39.902" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20180713 12:31:39.902" starttime="20180713 12:31:39.902"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${VNFName}</var>
</assign>
<msg timestamp="20180713 12:31:39.903" level="INFO">${VNFName} = Test_REQ</msg>
<status status="PASS" endtime="20180713 12:31:39.903" starttime="20180713 12:31:39.903"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${ImageName}</var>
</assign>
<msg timestamp="20180713 12:31:39.904" level="INFO">${ImageName} = SBC</msg>
<status status="PASS" endtime="20180713 12:31:39.904" starttime="20180713 12:31:39.904"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<assign>
<var>${DiskFormat}</var>
</assign>
<msg timestamp="20180713 12:31:39.905" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20180713 12:31:39.905" starttime="20180713 12:31:39.904"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${ImageFilePath}</var>
</assign>
<msg timestamp="20180713 12:31:39.906" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20180713 12:31:39.906" starttime="20180713 12:31:39.905"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${ConatinerFormat}</var>
</assign>
<msg timestamp="20180713 12:31:39.907" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20180713 12:31:39.907" starttime="20180713 12:31:39.906"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>6</arg>
</arguments>
<assign>
<var>${FlavorP}</var>
</assign>
<msg timestamp="20180713 12:31:39.908" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20180713 12:31:39.908" starttime="20180713 12:31:39.907"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>7</arg>
</arguments>
<assign>
<var>${AvZone}</var>
</assign>
<msg timestamp="20180713 12:31:39.909" level="INFO">${AvZone} = nova:compute1</msg>
<status status="PASS" endtime="20180713 12:31:39.909" starttime="20180713 12:31:39.908"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>8</arg>
</arguments>
<assign>
<var>${Security}</var>
</assign>
<msg timestamp="20180713 12:31:39.910" level="INFO">${Security} = default</msg>
<status status="PASS" endtime="20180713 12:31:39.910" starttime="20180713 12:31:39.909"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${Protocol}</var>
</assign>
<msg timestamp="20180713 12:31:39.911" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20180713 12:31:39.911" starttime="20180713 12:31:39.910"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>10</arg>
</arguments>
<assign>
<var>${Direction}</var>
</assign>
<msg timestamp="20180713 12:31:39.912" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20180713 12:31:39.912" starttime="20180713 12:31:39.911"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>11</arg>
</arguments>
<assign>
<var>${Ethertype}</var>
</assign>
<msg timestamp="20180713 12:31:39.913" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20180713 12:31:39.913" starttime="20180713 12:31:39.912"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<assign>
<var>${FN}</var>
</assign>
<msg timestamp="20180713 12:31:39.914" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20180713 12:31:39.914" starttime="20180713 12:31:39.913"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<assign>
<var>${ImageFileName}</var>
</assign>
<msg timestamp="20180713 12:31:39.914" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180713 12:31:39.915" starttime="20180713 12:31:39.914"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic1}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20180713 12:31:39.915" starttime="20180713 12:31:39.915"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic2}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20180713 12:31:39.916" starttime="20180713 12:31:39.915"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic3}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20180713 12:31:39.916" starttime="20180713 12:31:39.916"></status>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<doc>Splits the extension from the given path.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${FlavourName}</var>
<var>${Ext}</var>
</assign>
<msg timestamp="20180713 12:31:39.917" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<msg timestamp="20180713 12:31:39.918" level="INFO">${Ext} = txt</msg>
<status status="PASS" endtime="20180713 12:31:39.918" starttime="20180713 12:31:39.917"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFileName}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.919" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180713 12:31:39.919" starttime="20180713 12:31:39.918"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.920" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20180713 12:31:39.920" starttime="20180713 12:31:39.919"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavourName}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.921" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20180713 12:31:39.921" starttime="20180713 12:31:39.920"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.922" level="INFO">${VNFName} = Test_REQ</msg>
<status status="PASS" endtime="20180713 12:31:39.922" starttime="20180713 12:31:39.921"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${server}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.923" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20180713 12:31:39.923" starttime="20180713 12:31:39.922"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageName}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.924" level="INFO">${ImageName} = SBC</msg>
<status status="PASS" endtime="20180713 12:31:39.924" starttime="20180713 12:31:39.923"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DiskFormat}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.925" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20180713 12:31:39.925" starttime="20180713 12:31:39.924"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFilePath}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.926" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20180713 12:31:39.926" starttime="20180713 12:31:39.925"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ConatinerFormat}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.927" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20180713 12:31:39.927" starttime="20180713 12:31:39.926"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavorP}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.928" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20180713 12:31:39.928" starttime="20180713 12:31:39.928"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AvZone}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.929" level="INFO">${AvZone} = nova:compute1</msg>
<status status="PASS" endtime="20180713 12:31:39.929" starttime="20180713 12:31:39.929"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Security}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.930" level="INFO">${Security} = default</msg>
<status status="PASS" endtime="20180713 12:31:39.930" starttime="20180713 12:31:39.930"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Protocol}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.931" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20180713 12:31:39.931" starttime="20180713 12:31:39.931"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Direction}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.932" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20180713 12:31:39.932" starttime="20180713 12:31:39.932"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ethertype}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.933" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20180713 12:31:39.933" starttime="20180713 12:31:39.933"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic1}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:31:39.934" starttime="20180713 12:31:39.933"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic2}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:31:39.934" starttime="20180713 12:31:39.934"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.934" level="INFO">${VNFName} = Test_REQ</msg>
<status status="PASS" endtime="20180713 12:31:39.935" starttime="20180713 12:31:39.934"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic3}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:31:39.935" starttime="20180713 12:31:39.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${server}=="RedHat"</arg>
<arg>Return From Keyword</arg>
<arg>@{RedHat}</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>@{RedHat}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.936" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20180713 12:31:39.936" starttime="20180713 12:31:39.935"></status>
</kw>
<status status="PASS" endtime="20180713 12:31:39.936" starttime="20180713 12:31:39.935"></status>
</kw>
<msg timestamp="20180713 12:31:39.936" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20180713 12:31:39.936" starttime="20180713 12:31:39.898"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{Server}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.937" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20180713 12:31:39.937" starttime="20180713 12:31:39.937"></status>
</kw>
<kw name="Server_Login" library="Genric_Keywords">
<arguments>
<arg>@{Server}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${HOST}</var>
</assign>
<msg timestamp="20180713 12:31:39.939" level="INFO">${HOST} = 10.53.214.10</msg>
<status status="PASS" endtime="20180713 12:31:39.939" starttime="20180713 12:31:39.938"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${USERNAME}</var>
</assign>
<msg timestamp="20180713 12:31:39.939" level="INFO">${USERNAME} = root</msg>
<status status="PASS" endtime="20180713 12:31:39.939" starttime="20180713 12:31:39.939"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${PASSWORD}</var>
</assign>
<msg timestamp="20180713 12:31:39.940" level="INFO">${PASSWORD} = techm123</msg>
<status status="PASS" endtime="20180713 12:31:39.940" starttime="20180713 12:31:39.939"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<msg timestamp="20180713 12:31:39.941" level="INFO">${Index} = 1</msg>
<status status="PASS" endtime="20180713 12:31:39.941" starttime="20180713 12:31:39.940"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Login</arg>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180713 12:31:39.941" level="INFO">Logging into '10.53.214.10:22' as 'root'.</msg>
<msg timestamp="20180713 12:32:02.456" level="INFO">Read output: Last login: Fri Jul 13 02:46:17 2018 from 172.18.0.55
[root@controller ~]#</msg>
<status status="PASS" endtime="20180713 12:32:02.457" starttime="20180713 12:31:39.941"></status>
</kw>
<msg timestamp="20180713 12:32:02.457" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180713 12:32:02.457" starttime="20180713 12:31:39.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:02.460" starttime="20180713 12:32:02.458"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20180713 12:32:02.461" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20180713 12:32:02.462" starttime="20180713 12:32:02.460"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:02.462" starttime="20180713 12:31:39.940"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:02.462" starttime="20180713 12:31:39.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation**********************</arg>
</arguments>
<msg timestamp="20180713 12:32:02.463" level="INFO">*****************ServerLogin_Validation**********************</msg>
<status status="PASS" endtime="20180713 12:32:02.464" starttime="20180713 12:32:02.463"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>ifconfig | grep inet</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ifconfig | grep inet</arg>
</arguments>
<msg timestamp="20180713 12:32:02.474" level="INFO">ifconfig | grep inet</msg>
<status status="PASS" endtime="20180713 12:32:02.475" starttime="20180713 12:32:02.466"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:02.476" starttime="20180713 12:32:02.465"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:32:06.478" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:32:06.478" starttime="20180713 12:32:02.477"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:32:06.480" level="INFO">[01;31m[Kinet[m[K 172.18.0.60  netmask 255.255.255.0  broadcast 172.18.0.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 172.18.113.11  netmask 255.255.255.0  broadcast 172.18.113.255
        [01;31m[Kinet[m[K6 fe80::8006:74ff:fe4f:e843  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.80.1.8  netmask 255.255.255.0  broadcast 10.80.1.255
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b14  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.81.1.8  netmask 255.255.255.0  broadcast 10.81.1.255
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b16  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3ca  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.53.214.10  netmask 255.255.255.0  broadcast 10.53.214.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cc  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 127.0.0.1  netmask 255.0.0.0
        [01;31m[Kinet[m[K6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b14  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b16  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@controller ~]#</msg>
<msg timestamp="20180713 12:32:06.480" level="INFO">${output} =         [01;31m[Kinet[m[K 172.18.0.60  netmask 255.255.255.0  broadcast 172.18.0.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[...</msg>
<status status="PASS" endtime="20180713 12:32:06.480" starttime="20180713 12:32:06.479"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:06.482" starttime="20180713 12:32:06.481"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation Completed**********************</arg>
</arguments>
<msg timestamp="20180713 12:32:06.483" level="INFO">*****************ServerLogin_Validation Completed**********************</msg>
<status status="PASS" endtime="20180713 12:32:06.483" starttime="20180713 12:32:06.483"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>source keystonerc_admin</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source keystonerc_admin</arg>
</arguments>
<msg timestamp="20180713 12:32:06.493" level="INFO">source keystonerc_admin</msg>
<status status="PASS" endtime="20180713 12:32:06.494" starttime="20180713 12:32:06.486"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:06.494" starttime="20180713 12:32:06.484"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:32:06.495" level="INFO">[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:32:06.495" level="INFO">${output} = [root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:32:06.496" starttime="20180713 12:32:06.494"></status>
</kw>
<msg timestamp="20180713 12:32:06.496" level="INFO">${Index} = 1</msg>
<status status="PASS" endtime="20180713 12:32:06.497" starttime="20180713 12:31:39.938"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Print Logger</arg>
<arg>Server Logged</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:06.499" starttime="20180713 12:32:06.498"></status>
</kw>
<kw name="SBC_CreateFlavor" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:06.503" starttime="20180713 12:32:06.502"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:06.504" starttime="20180713 12:32:06.503"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>***SBC Flavor Creation is Started ***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:06.506" starttime="20180713 12:32:06.504"></status>
</kw>
<kw name="Create Flavor" library="Genric_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>********************Create Flavor start*****************************</arg>
</arguments>
<msg timestamp="20180713 12:32:06.508" level="INFO">********************Create Flavor start*****************************</msg>
<status status="PASS" endtime="20180713 12:32:06.508" starttime="20180713 12:32:06.507"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\</arg>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20180713 12:32:06.510" level="INFO">${path} = C:\xampp\htdocs\VNFXchange\Genric_Script\Config\Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20180713 12:32:06.510" starttime="20180713 12:32:06.509"></status>
</kw>
<kw name="ImportFlavor" library="Genric_Keywords">
<arguments>
<arg>${path}</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${Path}</arg>
</arguments>
<assign>
<var>${File}</var>
</assign>
<msg timestamp="20180713 12:32:06.513" html="yes" level="INFO">Getting file '&lt;a href="file://C:\xampp\htdocs\VNFXchange\Genric_Script\Config\Oracle_SBC_Flavour_Template.txt"&gt;C:\xampp\htdocs\VNFXchange\Genric_Script\Config\Oracle_SBC_Flavour_Template.txt&lt;/a&gt;'.</msg>
<msg timestamp="20180713 12:32:06.516" level="INFO">${File} = Ram:8192
disk:80
vcpus:4</msg>
<status status="PASS" endtime="20180713 12:32:06.516" starttime="20180713 12:32:06.512"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${Flavor_list}</var>
</assign>
<msg timestamp="20180713 12:32:06.518" level="INFO">${Flavor_list} = []</msg>
<status status="PASS" endtime="20180713 12:32:06.518" starttime="20180713 12:32:06.517"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${File}</arg>
</arguments>
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20180713 12:32:06.519" level="INFO">3 lines returned</msg>
<msg timestamp="20180713 12:32:06.520" level="INFO">@{list} = [ Ram:8192 | disk:80 | vcpus:4 ]</msg>
<status status="PASS" endtime="20180713 12:32:06.520" starttime="20180713 12:32:06.518"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${i}</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:06.521" starttime="20180713 12:32:06.520"></status>
</kw>
<kw type="for" name="${line} IN [ @{list} ]">
<kw type="foritem" name="${line} = Ram:8192">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>${line}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:06.523" starttime="20180713 12:32:06.522"></status>
</kw>
<kw name="Split String From Right" library="String">
<doc>Splits the ``string`` using ``separator`` starting from right.</doc>
<arguments>
<arg>${line}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20180713 12:32:06.525" level="INFO">@{data} = [ Ram | 8192 ]</msg>
<status status="PASS" endtime="20180713 12:32:06.525" starttime="20180713 12:32:06.523"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${data}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Value}</var>
</assign>
<msg timestamp="20180713 12:32:06.527" level="INFO">${Value} = 8192</msg>
<status status="PASS" endtime="20180713 12:32:06.527" starttime="20180713 12:32:06.525"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>${Value}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:06.529" starttime="20180713 12:32:06.527"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:06.529" starttime="20180713 12:32:06.522"></status>
</kw>
<kw type="foritem" name="${line} = disk:80">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>${line}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:06.530" starttime="20180713 12:32:06.529"></status>
</kw>
<kw name="Split String From Right" library="String">
<doc>Splits the ``string`` using ``separator`` starting from right.</doc>
<arguments>
<arg>${line}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20180713 12:32:06.532" level="INFO">@{data} = [ disk | 80 ]</msg>
<status status="PASS" endtime="20180713 12:32:06.532" starttime="20180713 12:32:06.531"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${data}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Value}</var>
</assign>
<msg timestamp="20180713 12:32:06.534" level="INFO">${Value} = 80</msg>
<status status="PASS" endtime="20180713 12:32:06.534" starttime="20180713 12:32:06.533"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>${Value}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:06.536" starttime="20180713 12:32:06.535"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:06.536" starttime="20180713 12:32:06.529"></status>
</kw>
<kw type="foritem" name="${line} = vcpus:4">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>${line}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:06.537" starttime="20180713 12:32:06.537"></status>
</kw>
<kw name="Split String From Right" library="String">
<doc>Splits the ``string`` using ``separator`` starting from right.</doc>
<arguments>
<arg>${line}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20180713 12:32:06.539" level="INFO">@{data} = [ vcpus | 4 ]</msg>
<status status="PASS" endtime="20180713 12:32:06.539" starttime="20180713 12:32:06.538"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${data}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Value}</var>
</assign>
<msg timestamp="20180713 12:32:06.541" level="INFO">${Value} = 4</msg>
<status status="PASS" endtime="20180713 12:32:06.541" starttime="20180713 12:32:06.540"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>${Value}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:06.543" starttime="20180713 12:32:06.542"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:06.543" starttime="20180713 12:32:06.536"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:06.543" starttime="20180713 12:32:06.521"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${Ram}</var>
</assign>
<msg timestamp="20180713 12:32:06.544" level="INFO">${Ram} = 8192</msg>
<status status="PASS" endtime="20180713 12:32:06.544" starttime="20180713 12:32:06.543"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Disk}</var>
</assign>
<msg timestamp="20180713 12:32:06.545" level="INFO">${Disk} = 80</msg>
<status status="PASS" endtime="20180713 12:32:06.545" starttime="20180713 12:32:06.544"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${CPU}</var>
</assign>
<msg timestamp="20180713 12:32:06.546" level="INFO">${CPU} = 4</msg>
<status status="PASS" endtime="20180713 12:32:06.546" starttime="20180713 12:32:06.545"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ram}</arg>
</arguments>
<msg timestamp="20180713 12:32:06.547" level="INFO">${Ram} = 8192</msg>
<status status="PASS" endtime="20180713 12:32:06.547" starttime="20180713 12:32:06.547"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Disk}</arg>
</arguments>
<msg timestamp="20180713 12:32:06.549" level="INFO">${Disk} = 80</msg>
<status status="PASS" endtime="20180713 12:32:06.549" starttime="20180713 12:32:06.548"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CPU}</arg>
</arguments>
<msg timestamp="20180713 12:32:06.550" level="INFO">${CPU} = 4</msg>
<status status="PASS" endtime="20180713 12:32:06.550" starttime="20180713 12:32:06.549"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:06.550" starttime="20180713 12:32:06.511"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova flavor-create</arg>
<arg>${FlavourName}</arg>
<arg>auto</arg>
<arg>${Ram}</arg>
<arg>${Disk}</arg>
<arg>${CPU}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180713 12:32:06.551" level="INFO">${str} = nova flavor-create Oracle_SBC_Flavour_Template auto 8192 80 4</msg>
<status status="PASS" endtime="20180713 12:32:06.552" starttime="20180713 12:32:06.550"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180713 12:32:06.558" level="INFO">nova flavor-create Oracle_SBC_Flavour_Templ ate auto 8192 80 4</msg>
<status status="PASS" endtime="20180713 12:32:06.558" starttime="20180713 12:32:06.552"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:32:11.559" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:32:11.559" starttime="20180713 12:32:06.558"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:32:11.561" level="INFO">ERROR (Conflict): Flavor with name Oracle_SBC_Flavour_Template already exists. (HTTP 409) (Request-ID: req-69b6c6df-6dce-4043-ad54-e922f50e4c72)
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:32:11.562" level="INFO">${output} = ERROR (Conflict): Flavor with name Oracle_SBC_Flavour_Template already exists. (HTTP 409) (Request-ID: req-69b6c6df-6dce-4043-ad54-e922f50e4c72)
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:32:11.562" starttime="20180713 12:32:11.560"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>********************Create Flavor Complete*****************************</arg>
</arguments>
<msg timestamp="20180713 12:32:11.563" level="INFO">********************Create Flavor Complete*****************************</msg>
<status status="PASS" endtime="20180713 12:32:11.564" starttime="20180713 12:32:11.563"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:11.564" starttime="20180713 12:32:06.506"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>***SBC Flavor Creation is Successfully Completed ***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:11.567" starttime="20180713 12:32:11.565"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:11.567" starttime="20180713 12:32:06.501"></status>
</kw>
<kw name="Flavor_Validation" library="Oracle_SBC_Keywords">
<kw name="Print Logger" library="Library">
<arguments>
<arg>***Flavor Validation Started ***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:11.572" starttime="20180713 12:32:11.570"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:11.573" starttime="20180713 12:32:11.572"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:11.575" starttime="20180713 12:32:11.574"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova flavor-list |grep \ -i</arg>
<arg>${FlavourName}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180713 12:32:11.578" level="INFO">${str} = nova flavor-list |grep  -i Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20180713 12:32:11.578" starttime="20180713 12:32:11.576"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180713 12:32:11.588" level="INFO">nova flavor-list |grep  -i Oracle_SBC_Flavo ur_Template</msg>
<status status="PASS" endtime="20180713 12:32:11.588" starttime="20180713 12:32:11.580"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:11.588" starttime="20180713 12:32:11.578"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180713 12:32:21.589" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180713 12:32:21.589" starttime="20180713 12:32:11.588"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:32:21.591" level="INFO">| 9c0a9e9a-647c-4582-8282-a8e91283e5fd | [01;31m[KOracle_SBC_Flavour_Template[m[K | 8192      | 80    | 0         |      | 4     | 1.0         | True      |
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:32:21.591" level="INFO">${output} = | 9c0a9e9a-647c-4582-8282-a8e91283e5fd | [01;31m[KOracle_SBC_Flavour_Template[m[K | 8192      | 80    | 0         |      | 4     | 1.0         | True      |
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:32:21.592" starttime="20180713 12:32:21.590"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${FlavourName}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.593" starttime="20180713 12:32:21.592"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>***Flavor_Validation is Successfully Completed ***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.595" starttime="20180713 12:32:21.594"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:21.596" starttime="20180713 12:32:11.569"></status>
</kw>
<kw name="SBC_CreateImage" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.599" starttime="20180713 12:32:21.599"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.600" starttime="20180713 12:32:21.600"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>**************Push Image started***********</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.601" starttime="20180713 12:32:21.601"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>PushimagefiletoServer</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.602" starttime="20180713 12:32:21.602"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>**************Push Image Completed***********</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.603" starttime="20180713 12:32:21.603"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************Image Create Started ***********</arg>
</arguments>
<msg timestamp="20180713 12:32:21.604" level="INFO">**************Image Create Started ***********</msg>
<status status="PASS" endtime="20180713 12:32:21.605" starttime="20180713 12:32:21.604"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>***Image Create Started ***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.607" starttime="20180713 12:32:21.605"></status>
</kw>
<kw name="GlanceImageUpload" library="Genric_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>******************Create Image on Glance Started*******************</arg>
</arguments>
<msg timestamp="20180713 12:32:21.609" level="INFO">******************Create Image on Glance Started*******************</msg>
<status status="PASS" endtime="20180713 12:32:21.609" starttime="20180713 12:32:21.609"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Switch Connection</arg>
<arg>${Index}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.611" starttime="20180713 12:32:21.610"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${IN}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.612" starttime="20180713 12:32:21.611"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${DF}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.613" starttime="20180713 12:32:21.612"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${IFP}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.614" starttime="20180713 12:32:21.613"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${CF}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.615" starttime="20180713 12:32:21.614"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${FP}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.616" starttime="20180713 12:32:21.616"></status>
</kw>
<kw name="Getimagename" library="Library">
<arguments>
<arg>${ImageFilePath}</arg>
<arg>${ImageFileName}</arg>
</arguments>
<assign>
<var>${remotepathwithimagename}</var>
</assign>
<msg timestamp="20180713 12:32:21.618" level="INFO">${remotepathwithimagename} = /root/auto_heatfiles/nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180713 12:32:21.619" starttime="20180713 12:32:21.617"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${dstImage}</arg>
<arg>Catenate</arg>
<arg>SEPERATOR=/</arg>
<arg>/root/auto_heatfiles</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.620" starttime="20180713 12:32:21.619"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${IN}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:21.621" starttime="20180713 12:32:21.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>glance image-create --name</arg>
<arg>${ImageName}</arg>
</arguments>
<assign>
<var>${str1}</var>
</assign>
<msg timestamp="20180713 12:32:21.623" level="INFO">${str1} = glance image-create --name SBC</msg>
<status status="PASS" endtime="20180713 12:32:21.623" starttime="20180713 12:32:21.622"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--disk-format</arg>
<arg>${DiskFormat}</arg>
</arguments>
<assign>
<var>${str2}</var>
</assign>
<msg timestamp="20180713 12:32:21.625" level="INFO">${str2} = --disk-format qcow2</msg>
<status status="PASS" endtime="20180713 12:32:21.625" starttime="20180713 12:32:21.623"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--file</arg>
<arg>${remotepathwithimagename}</arg>
</arguments>
<assign>
<var>${str3}</var>
</assign>
<msg timestamp="20180713 12:32:21.627" level="INFO">${str3} = --file /root/auto_heatfiles/nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180713 12:32:21.627" starttime="20180713 12:32:21.626"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--container-format</arg>
<arg>${ConatinerFormat}</arg>
</arguments>
<assign>
<var>${str4}</var>
</assign>
<msg timestamp="20180713 12:32:21.629" level="INFO">${str4} = --container-format bare</msg>
<status status="PASS" endtime="20180713 12:32:21.629" starttime="20180713 12:32:21.627"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${str1}</arg>
<arg>${str2}</arg>
<arg>${str4}</arg>
<arg>${str3}</arg>
</arguments>
<assign>
<var>${str5}</var>
</assign>
<msg timestamp="20180713 12:32:21.631" level="INFO">${str5} = glance image-create --name SBC --disk-format qcow2 --container-format bare --file /root/auto_heatfiles/nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180713 12:32:21.631" starttime="20180713 12:32:21.629"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str5}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str5}</arg>
</arguments>
<msg timestamp="20180713 12:32:21.640" level="INFO">glance image-create --name SBC --disk-forma t qcow2 --container-format bare --file /root/auto_heatfiles/nnSCZ739p1-img-vm_kv m.qcow2</msg>
<status status="PASS" endtime="20180713 12:32:21.641" starttime="20180713 12:32:21.633"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:21.641" starttime="20180713 12:32:21.632"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15</arg>
</arguments>
<msg timestamp="20180713 12:32:36.641" level="INFO">Slept 15 seconds</msg>
<status status="PASS" endtime="20180713 12:32:36.642" starttime="20180713 12:32:21.641"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>******************Create Image on Glance completed*******************</arg>
</arguments>
<msg timestamp="20180713 12:32:36.644" level="INFO">******************Create Image on Glance completed*******************</msg>
<status status="PASS" endtime="20180713 12:32:36.644" starttime="20180713 12:32:36.643"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:32:36.646" level="INFO">+------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum         | 9c12c518d6358b2826b30d82597d4feb     |
| container_format | bare                                 |
| created_at       | 2018-07-13T07:01:16Z                 |
| disk_format      | qcow2                                |
| id               | 7f605848-8e64-4aee-ac1f-6c5df90a7143 |
| min_disk         | 0                                    |
| min_ram          | 0                                    |
| name             | SBC                                  |
| owner            | 8f6857039a224ab1b596bfd42147dc88     |
| protected        | False                                |
| size             | 93847552                             |
| status           | active                               |
| tags             | []                                   |
| updated_at       | 2018-07-13T07:01:16Z                 |
| virtual_size     | None                                 |
| visibility       | private                              |
+------------------+--------------------------------------+
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:32:36.646" level="INFO">${output} = +------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum       ...</msg>
<status status="PASS" endtime="20180713 12:32:36.647" starttime="20180713 12:32:36.645"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:36.647" starttime="20180713 12:32:21.608"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************Image Create Completed ***********</arg>
</arguments>
<msg timestamp="20180713 12:32:36.648" level="INFO">**************Image Create Completed ***********</msg>
<status status="PASS" endtime="20180713 12:32:36.649" starttime="20180713 12:32:36.648"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>***SBC_CreateImage Done***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:36.651" starttime="20180713 12:32:36.650"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:36.652" starttime="20180713 12:32:21.597"></status>
</kw>
<kw name="Image_Validation" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:36.656" starttime="20180713 12:32:36.655"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:36.657" starttime="20180713 12:32:36.657"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************************Image Validation Started**********************</arg>
</arguments>
<msg timestamp="20180713 12:32:36.659" level="INFO">*****************************Image Validation Started**********************</msg>
<status status="PASS" endtime="20180713 12:32:36.659" starttime="20180713 12:32:36.658"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Print Logger</arg>
<arg>*****************************Uploading of qcow2 Image to Glance**********************</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:36.661" starttime="20180713 12:32:36.660"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>***Image Validation Started***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:36.663" starttime="20180713 12:32:36.661"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova image-list |grep \ -i</arg>
<arg>${ImageName}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180713 12:32:36.666" level="INFO">${str} = nova image-list |grep  -i SBC</msg>
<status status="PASS" endtime="20180713 12:32:36.666" starttime="20180713 12:32:36.664"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180713 12:32:36.676" level="INFO">nova image-list |grep  -i SBC</msg>
<status status="PASS" endtime="20180713 12:32:36.676" starttime="20180713 12:32:36.668"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:36.677" starttime="20180713 12:32:36.667"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:32:41.678" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:32:41.678" starttime="20180713 12:32:36.678"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:32:41.681" level="INFO">| 7f605848-8e64-4aee-ac1f-6c5df90a7143 | [01;31m[KSBC[m[K                                             | ACTIVE |                                      |
| 08826168-23e2-4167-9764-dd5ac5ca0174 | [01;31m[Ksbc[m[K-Img                                         | ACTIVE |                                      |
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:32:41.681" level="INFO">${output} = | 7f605848-8e64-4aee-ac1f-6c5df90a7143 | [01;31m[KSBC[m[K                                             | ACTIVE |                                      |
| 08826168-23e2-4167-9764-dd5ac5ca0174 | [...</msg>
<status status="PASS" endtime="20180713 12:32:41.682" starttime="20180713 12:32:41.679"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${ImageName}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:41.684" starttime="20180713 12:32:41.682"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Print Logger</arg>
<arg>*******SBC VNF image Qcow2 is uploaded &amp; validated for checksum*******</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:41.686" starttime="20180713 12:32:41.685"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>***Image_Validation Done***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:41.688" starttime="20180713 12:32:41.686"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:41.689" starttime="20180713 12:32:36.654"></status>
</kw>
<kw name="SBC_OnboardVM" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:41.692" starttime="20180713 12:32:41.691"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:41.694" starttime="20180713 12:32:41.693"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>***SBC VM creation is in progress ***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:41.696" starttime="20180713 12:32:41.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*************VM Create Started ***********</arg>
</arguments>
<msg timestamp="20180713 12:32:41.698" level="INFO">*************VM Create Started ***********</msg>
<status status="PASS" endtime="20180713 12:32:41.698" starttime="20180713 12:32:41.697"></status>
</kw>
<kw name="VMCreation" library="Genric_Keywords">
<arguments>
<arg>${Label}</arg>
<arg>${NicSBC}</arg>
</arguments>
<kw name="Getimagename" library="Library">
<arguments>
<arg>${ImageFilePath}</arg>
<arg>${ImageFileName}</arg>
</arguments>
<assign>
<var>${remotepathwithimagename}</var>
</assign>
<msg timestamp="20180713 12:32:41.702" level="INFO">${remotepathwithimagename} = /root/auto_heatfiles/nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180713 12:32:41.703" starttime="20180713 12:32:41.701"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>write</arg>
<arg>neutron net-list | head -6 | tail -3 | awk -F "|" '{print $2}' &gt;&gt; nicID.txt</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:41.704" starttime="20180713 12:32:41.703"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Get File</arg>
<arg>/root/nicID.txt</arg>
<arg>C://Users//Admin//Desktop//Sukesh-Automation//RobotFramework//Genric_Script//Python_Script//</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:41.705" starttime="20180713 12:32:41.704"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Switch Connection</arg>
<arg>${Index}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:41.706" starttime="20180713 12:32:41.706"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{FlvrParam}</arg>
<arg>Parseconfdata</arg>
<arg>${FlavorP}</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:41.707" starttime="20180713 12:32:41.707"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${FlavourName}</arg>
<arg>Get From List</arg>
<arg>${FlvrParam}</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:41.708" starttime="20180713 12:32:41.708"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--flavor</arg>
<arg>${FlavourName}</arg>
</arguments>
<assign>
<var>${flavor}</var>
</assign>
<msg timestamp="20180713 12:32:41.710" level="INFO">${flavor} = --flavor Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20180713 12:32:41.710" starttime="20180713 12:32:41.709"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--availability_zone</arg>
<arg>${AvZone}</arg>
</arguments>
<assign>
<var>${AvailZone}</var>
</assign>
<msg timestamp="20180713 12:32:41.712" level="INFO">${AvailZone} = --availability_zone nova:compute1</msg>
<status status="PASS" endtime="20180713 12:32:41.713" starttime="20180713 12:32:41.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--security-groups</arg>
<arg>${Security}</arg>
</arguments>
<assign>
<var>${SecurityPol}</var>
</assign>
<msg timestamp="20180713 12:32:41.715" level="INFO">${SecurityPol} = --security-groups default</msg>
<status status="PASS" endtime="20180713 12:32:41.715" starttime="20180713 12:32:41.713"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${image}</arg>
<arg>Catenate</arg>
<arg>--image</arg>
<arg>${IN}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:32:41.716" starttime="20180713 12:32:41.715"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova boot</arg>
<arg>${flavor}</arg>
<arg>--image</arg>
<arg>${ImageName}</arg>
<arg>${AvailZone}</arg>
<arg>${SecurityPol}</arg>
<arg>${Nic}</arg>
<arg>--config-drive=true</arg>
<arg>${VNFName}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180713 12:32:41.719" level="INFO">${str} = nova boot --flavor Oracle_SBC_Flavour_Template --image SBC --availability_zone nova:compute1 --security-groups default --nic net-id=3f4a053f-3b05-4388-8e4a-8e47bcd757fb  --nic net-id=78d1ec17-397d-455...</msg>
<status status="PASS" endtime="20180713 12:32:41.719" starttime="20180713 12:32:41.716"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:32:46.720" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:32:46.720" starttime="20180713 12:32:41.720"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180713 12:32:46.742" level="INFO">nova boot --flavor Oracle_SBC_Flavour_Templ ate --image SBC --availability_zone nova:compute1 --security-groups default --ni c net-id=3f4a053f-3b05-4388-8e4a-8e47bcd757fb  --nic net-id=78d1ec17-397d-455c-9 d4d-3e79116d6337  --nic net-id=78d1ec17-397d-455c-9d4d-3e79116d6337 --config-dri ve=true Test_REQ</msg>
<status status="PASS" endtime="20180713 12:32:46.742" starttime="20180713 12:32:46.723"></status>
</kw>
<status status="PASS" endtime="20180713 12:32:46.742" starttime="20180713 12:32:46.721"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>40</arg>
</arguments>
<msg timestamp="20180713 12:33:26.744" level="INFO">Slept 40 seconds</msg>
<status status="PASS" endtime="20180713 12:33:26.744" starttime="20180713 12:32:46.743"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:33:26.746" level="INFO">+--------------------------------------+--------------------------------------------------------------------+
| Property                             | Value                                                              |
+--------------------------------------+--------------------------------------------------------------------+
| OS-DCF:diskConfig                    | MANUAL                                                             |
| OS-EXT-AZ:availability_zone          | nova                                                               |
| OS-EXT-SRV-ATTR:host                 | -                                                                  |
| OS-EXT-SRV-ATTR:hypervisor_hostname  | -                                                                  |
| OS-EXT-SRV-ATTR:instance_name        | instance-0000141d                                                  |
| OS-EXT-STS:power_state               | 0                                                                  |
| OS-EXT-STS:task_state                | scheduling                                                         |
| OS-EXT-STS:vm_state                  | building                                                           |
| OS-SRV-USG:launched_at               | -                                                                  |
| OS-SRV-USG:terminated_at             | -                                                                  |
| accessIPv4                           |                                                                    |
| accessIPv6                           |                                                                    |
| adminPass                            | 9dekSRDs5D5a                                                       |
| config_drive                         | True                                                               |
| created                              | 2018-07-13T07:01:43Z                                               |
| flavor                               | Oracle_SBC_Flavour_Template (9c0a9e9a-647c-4582-8282-a8e91283e5fd) |
| hostId                               |                                                                    |
| id                                   | abd5cc17-5f01-407a-b1f3-f830d0f76db5                               |
| image                                | SBC (7f605848-8e64-4aee-ac1f-6c5df90a7143)                         |
| key_name                             | -                                                                  |
| metadata                             | {}                                                                 |
| name                                 | Test_REQ                                                           |
| os-extended-volumes:volumes_attached | []                                                                 |
| progress                             | 0                                                                  |
| security_groups                      | default                                                            |
| status                               | BUILD                                                              |
| tenant_id                            | 8f6857039a224ab1b596bfd42147dc88                                   |
| updated                              | 2018-07-13T07:01:43Z                                               |
| user_id                              | 26917d95d4584829a3db1f86c252a709                                   |
+--------------------------------------+--------------------------------------------------------------------+
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:33:26.746" level="INFO">${output} = +--------------------------------------+--------------------------------------------------------------------+
| Property                             | Value                                           ...</msg>
<status status="PASS" endtime="20180713 12:33:26.746" starttime="20180713 12:33:26.745"></status>
</kw>
<status status="PASS" endtime="20180713 12:33:26.747" starttime="20180713 12:32:41.699"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>60</arg>
</arguments>
<msg timestamp="20180713 12:34:26.748" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20180713 12:34:26.748" starttime="20180713 12:33:26.747"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>********Reboot Process In Progress Bringing up the VM *************</arg>
</arguments>
<msg timestamp="20180713 12:34:26.748" level="INFO">********Reboot Process In Progress Bringing up the VM *************</msg>
<status status="PASS" endtime="20180713 12:34:26.748" starttime="20180713 12:34:26.748"></status>
</kw>
<kw name="Reboot_loop" library="Oracle_SBC_Keywords">
<kw name="Get_SBC-IP" library="Oracle_SBC_Keywords">
<kw name="ImportDetails" library="Genric_Keywords">
<arguments>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Server}</var>
</assign>
<kw name="Parseconfdata" library="Library">
<arguments>
<arg>${ConfigPath}</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Param}</var>
</assign>
<msg timestamp="20180713 12:34:26.751" level="INFO">@{Param} = [ "RedHat" | Test_REQ | SBC | qcow2 | /root/auto_heatfiles | bare | C:\xampp\htdocs\VNFXchange | nova:compute1 | default | TCP | Ingress | ipv4 | Oracle_SBC_Flavour_Template.txt | nnSCZ739p1-img-vm_kv...</msg>
<status status="PASS" endtime="20180713 12:34:26.751" starttime="20180713 12:34:26.750"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${server}</var>
</assign>
<msg timestamp="20180713 12:34:26.751" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20180713 12:34:26.751" starttime="20180713 12:34:26.751"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${VNFName}</var>
</assign>
<msg timestamp="20180713 12:34:26.752" level="INFO">${VNFName} = Test_REQ</msg>
<status status="PASS" endtime="20180713 12:34:26.752" starttime="20180713 12:34:26.751"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${ImageName}</var>
</assign>
<msg timestamp="20180713 12:34:26.752" level="INFO">${ImageName} = SBC</msg>
<status status="PASS" endtime="20180713 12:34:26.752" starttime="20180713 12:34:26.752"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<assign>
<var>${DiskFormat}</var>
</assign>
<msg timestamp="20180713 12:34:26.753" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20180713 12:34:26.753" starttime="20180713 12:34:26.753"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${ImageFilePath}</var>
</assign>
<msg timestamp="20180713 12:34:26.754" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20180713 12:34:26.754" starttime="20180713 12:34:26.753"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${ConatinerFormat}</var>
</assign>
<msg timestamp="20180713 12:34:26.754" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20180713 12:34:26.754" starttime="20180713 12:34:26.754"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>6</arg>
</arguments>
<assign>
<var>${FlavorP}</var>
</assign>
<msg timestamp="20180713 12:34:26.755" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20180713 12:34:26.755" starttime="20180713 12:34:26.754"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>7</arg>
</arguments>
<assign>
<var>${AvZone}</var>
</assign>
<msg timestamp="20180713 12:34:26.755" level="INFO">${AvZone} = nova:compute1</msg>
<status status="PASS" endtime="20180713 12:34:26.755" starttime="20180713 12:34:26.755"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>8</arg>
</arguments>
<assign>
<var>${Security}</var>
</assign>
<msg timestamp="20180713 12:34:26.756" level="INFO">${Security} = default</msg>
<status status="PASS" endtime="20180713 12:34:26.756" starttime="20180713 12:34:26.755"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${Protocol}</var>
</assign>
<msg timestamp="20180713 12:34:26.756" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20180713 12:34:26.756" starttime="20180713 12:34:26.756"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>10</arg>
</arguments>
<assign>
<var>${Direction}</var>
</assign>
<msg timestamp="20180713 12:34:26.757" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20180713 12:34:26.757" starttime="20180713 12:34:26.756"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>11</arg>
</arguments>
<assign>
<var>${Ethertype}</var>
</assign>
<msg timestamp="20180713 12:34:26.757" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20180713 12:34:26.757" starttime="20180713 12:34:26.757"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<assign>
<var>${FN}</var>
</assign>
<msg timestamp="20180713 12:34:26.758" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20180713 12:34:26.758" starttime="20180713 12:34:26.758"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<assign>
<var>${ImageFileName}</var>
</assign>
<msg timestamp="20180713 12:34:26.758" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180713 12:34:26.758" starttime="20180713 12:34:26.758"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic1}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20180713 12:34:26.759" starttime="20180713 12:34:26.759"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic2}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20180713 12:34:26.759" starttime="20180713 12:34:26.759"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic3}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20180713 12:34:26.760" starttime="20180713 12:34:26.759"></status>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<doc>Splits the extension from the given path.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${FlavourName}</var>
<var>${Ext}</var>
</assign>
<msg timestamp="20180713 12:34:26.760" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<msg timestamp="20180713 12:34:26.760" level="INFO">${Ext} = txt</msg>
<status status="PASS" endtime="20180713 12:34:26.760" starttime="20180713 12:34:26.760"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFileName}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.761" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180713 12:34:26.761" starttime="20180713 12:34:26.760"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.761" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20180713 12:34:26.761" starttime="20180713 12:34:26.761"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavourName}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.762" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20180713 12:34:26.762" starttime="20180713 12:34:26.762"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.763" level="INFO">${VNFName} = Test_REQ</msg>
<status status="PASS" endtime="20180713 12:34:26.763" starttime="20180713 12:34:26.762"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${server}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.763" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20180713 12:34:26.763" starttime="20180713 12:34:26.763"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageName}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.764" level="INFO">${ImageName} = SBC</msg>
<status status="PASS" endtime="20180713 12:34:26.764" starttime="20180713 12:34:26.763"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DiskFormat}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.764" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20180713 12:34:26.765" starttime="20180713 12:34:26.764"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFilePath}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.765" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20180713 12:34:26.765" starttime="20180713 12:34:26.765"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ConatinerFormat}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.766" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20180713 12:34:26.766" starttime="20180713 12:34:26.765"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavorP}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.767" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20180713 12:34:26.767" starttime="20180713 12:34:26.766"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AvZone}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.767" level="INFO">${AvZone} = nova:compute1</msg>
<status status="PASS" endtime="20180713 12:34:26.767" starttime="20180713 12:34:26.767"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Security}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.768" level="INFO">${Security} = default</msg>
<status status="PASS" endtime="20180713 12:34:26.768" starttime="20180713 12:34:26.768"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Protocol}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.769" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20180713 12:34:26.769" starttime="20180713 12:34:26.768"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Direction}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.769" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20180713 12:34:26.769" starttime="20180713 12:34:26.769"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ethertype}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.770" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20180713 12:34:26.770" starttime="20180713 12:34:26.769"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic1}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:34:26.770" starttime="20180713 12:34:26.770"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic2}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:34:26.771" starttime="20180713 12:34:26.770"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.771" level="INFO">${VNFName} = Test_REQ</msg>
<status status="PASS" endtime="20180713 12:34:26.771" starttime="20180713 12:34:26.771"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic3}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:34:26.772" starttime="20180713 12:34:26.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${server}=="RedHat"</arg>
<arg>Return From Keyword</arg>
<arg>@{RedHat}</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>@{RedHat}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.772" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20180713 12:34:26.772" starttime="20180713 12:34:26.772"></status>
</kw>
<status status="PASS" endtime="20180713 12:34:26.773" starttime="20180713 12:34:26.772"></status>
</kw>
<msg timestamp="20180713 12:34:26.773" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20180713 12:34:26.773" starttime="20180713 12:34:26.749"></status>
</kw>
<kw name="Server_Login" library="Genric_Keywords">
<arguments>
<arg>@{Server}</arg>
</arguments>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${HOST}</var>
</assign>
<msg timestamp="20180713 12:34:26.774" level="INFO">${HOST} = 10.53.214.10</msg>
<status status="PASS" endtime="20180713 12:34:26.774" starttime="20180713 12:34:26.773"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${USERNAME}</var>
</assign>
<msg timestamp="20180713 12:34:26.774" level="INFO">${USERNAME} = root</msg>
<status status="PASS" endtime="20180713 12:34:26.774" starttime="20180713 12:34:26.774"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${PASSWORD}</var>
</assign>
<msg timestamp="20180713 12:34:26.775" level="INFO">${PASSWORD} = techm123</msg>
<status status="PASS" endtime="20180713 12:34:26.775" starttime="20180713 12:34:26.774"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<msg timestamp="20180713 12:34:26.777" level="INFO">${Index} = 2</msg>
<status status="PASS" endtime="20180713 12:34:26.777" starttime="20180713 12:34:26.775"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Login</arg>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180713 12:34:26.778" level="INFO">Logging into '10.53.214.10:22' as 'root'.</msg>
<msg timestamp="20180713 12:34:47.884" level="INFO">Read output: Last login: Fri Jul 13 03:00:55 2018 from 10.53.172.9
[root@controller ~]#</msg>
<status status="PASS" endtime="20180713 12:34:47.885" starttime="20180713 12:34:26.778"></status>
</kw>
<msg timestamp="20180713 12:34:47.885" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180713 12:34:47.885" starttime="20180713 12:34:26.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20180713 12:34:47.888" starttime="20180713 12:34:47.886"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20180713 12:34:47.889" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20180713 12:34:47.889" starttime="20180713 12:34:47.888"></status>
</kw>
<status status="PASS" endtime="20180713 12:34:47.890" starttime="20180713 12:34:26.775"></status>
</kw>
<status status="PASS" endtime="20180713 12:34:47.890" starttime="20180713 12:34:26.775"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation**********************</arg>
</arguments>
<msg timestamp="20180713 12:34:47.891" level="INFO">*****************ServerLogin_Validation**********************</msg>
<status status="PASS" endtime="20180713 12:34:47.892" starttime="20180713 12:34:47.890"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>ifconfig | grep inet</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ifconfig | grep inet</arg>
</arguments>
<msg timestamp="20180713 12:34:47.901" level="INFO">ifconfig | grep inet</msg>
<status status="PASS" endtime="20180713 12:34:47.903" starttime="20180713 12:34:47.894"></status>
</kw>
<status status="PASS" endtime="20180713 12:34:47.904" starttime="20180713 12:34:47.892"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:34:51.907" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:34:51.907" starttime="20180713 12:34:47.906"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:34:51.908" level="INFO">[01;31m[Kinet[m[K 172.18.0.60  netmask 255.255.255.0  broadcast 172.18.0.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 172.18.113.11  netmask 255.255.255.0  broadcast 172.18.113.255
        [01;31m[Kinet[m[K6 fe80::8006:74ff:fe4f:e843  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.80.1.8  netmask 255.255.255.0  broadcast 10.80.1.255
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b14  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.81.1.8  netmask 255.255.255.0  broadcast 10.81.1.255
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b16  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3ca  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.53.214.10  netmask 255.255.255.0  broadcast 10.53.214.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cc  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 127.0.0.1  netmask 255.0.0.0
        [01;31m[Kinet[m[K6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b14  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b16  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@controller ~]#</msg>
<msg timestamp="20180713 12:34:51.908" level="INFO">${output} =         [01;31m[Kinet[m[K 172.18.0.60  netmask 255.255.255.0  broadcast 172.18.0.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[...</msg>
<status status="PASS" endtime="20180713 12:34:51.908" starttime="20180713 12:34:51.907"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:34:51.909" starttime="20180713 12:34:51.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation Completed**********************</arg>
</arguments>
<msg timestamp="20180713 12:34:51.910" level="INFO">*****************ServerLogin_Validation Completed**********************</msg>
<status status="PASS" endtime="20180713 12:34:51.910" starttime="20180713 12:34:51.909"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>source keystonerc_admin</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source keystonerc_admin</arg>
</arguments>
<msg timestamp="20180713 12:34:51.914" level="INFO">source keystonerc_admin</msg>
<status status="PASS" endtime="20180713 12:34:51.914" starttime="20180713 12:34:51.911"></status>
</kw>
<status status="PASS" endtime="20180713 12:34:51.914" starttime="20180713 12:34:51.910"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:34:51.915" level="INFO">[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:34:51.915" level="INFO">${output} = [root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:34:51.915" starttime="20180713 12:34:51.915"></status>
</kw>
<status status="PASS" endtime="20180713 12:34:51.915" starttime="20180713 12:34:26.773"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf value.txt</arg>
</arguments>
<msg timestamp="20180713 12:34:51.920" level="INFO">rm -rf value.txt</msg>
<status status="PASS" endtime="20180713 12:34:51.920" starttime="20180713 12:34:51.916"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}|awk -F "=" '{print $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</arg>
</arguments>
<msg timestamp="20180713 12:34:51.926" level="INFO">[root@controller ~(keystone_admin)]# nova list | grep -i Test_REQ|awk -F "=" '{p rint $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</msg>
<status status="PASS" endtime="20180713 12:34:51.926" starttime="20180713 12:34:51.920"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:34:55.927" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:34:55.927" starttime="20180713 12:34:51.927"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:34:55.929" level="INFO">10.80.1.244
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:34:55.930" level="INFO">${output} =  10.80.1.244
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:34:55.930" starttime="20180713 12:34:55.928"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:34:55.932" level="INFO">${output} = [u'10.80.1.244', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180713 12:34:55.932" starttime="20180713 12:34:55.930"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${Proxy_IP}</var>
</assign>
<msg timestamp="20180713 12:34:55.933" level="INFO">${Proxy_IP} = 10.80.1.244</msg>
<status status="PASS" endtime="20180713 12:34:55.934" starttime="20180713 12:34:55.932"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Proxy_IP}</arg>
</arguments>
<msg timestamp="20180713 12:34:55.936" level="INFO">${Proxy_IP} = 10.80.1.244</msg>
<status status="PASS" endtime="20180713 12:34:55.936" starttime="20180713 12:34:55.934"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20180713 12:34:55.947" level="INFO">nova list | grep -i Test_REQ| awk -F ";" '{ print $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20180713 12:34:55.947" starttime="20180713 12:34:55.937"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:35:00.948" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:35:00.948" starttime="20180713 12:34:55.948"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:00.950" level="INFO">172.18.0.126
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:35:00.951" level="INFO">${output} = 172.18.0.126
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:35:00.951" starttime="20180713 12:35:00.949"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:00.953" level="INFO">${output} = [u'172.18.0.126', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180713 12:35:00.953" starttime="20180713 12:35:00.951"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${MGmt_IP}</var>
</assign>
<msg timestamp="20180713 12:35:00.955" level="INFO">${MGmt_IP} = 172.18.0.126</msg>
<status status="PASS" endtime="20180713 12:35:00.955" starttime="20180713 12:35:00.954"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180713 12:35:00.958" level="INFO">${MGmt_IP} = 172.18.0.126</msg>
<status status="PASS" endtime="20180713 12:35:00.959" starttime="20180713 12:35:00.956"></status>
</kw>
<status status="PASS" endtime="20180713 12:35:00.959" starttime="20180713 12:34:26.749"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>Rebooting Server...............!</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:00.962" starttime="20180713 12:35:00.960"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:35:03.963" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:35:03.963" starttime="20180713 12:35:00.962"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180713 12:35:03.973" level="INFO">clear</msg>
<status status="PASS" endtime="20180713 12:35:03.973" starttime="20180713 12:35:03.964"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${i}</var>
</assign>
<msg timestamp="20180713 12:35:03.975" level="INFO">${i} = 0</msg>
<status status="PASS" endtime="20180713 12:35:03.976" starttime="20180713 12:35:03.974"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 250 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ping</arg>
<arg>-c 1</arg>
<arg>${MGmt_IP}</arg>
</arguments>
<assign>
<var>${store}</var>
</assign>
<msg timestamp="20180713 12:35:03.978" level="INFO">${store} = ping -c 1 172.18.0.126</msg>
<status status="PASS" endtime="20180713 12:35:03.978" starttime="20180713 12:35:03.977"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${store}</arg>
</arguments>
<msg timestamp="20180713 12:35:03.989" level="INFO">[H[J[root@controller ~(keystone_admin)]# ping -c 1 172.18.0.126</msg>
<status status="PASS" endtime="20180713 12:35:03.989" starttime="20180713 12:35:03.979"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:35:08.991" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:35:08.991" starttime="20180713 12:35:03.990"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20180713 12:35:08.993" level="INFO">PING 172.18.0.126 (172.18.0.126) 56(84) bytes of data.
64 bytes from 172.18.0.126: icmp_seq=1 ttl=64 time=1.96 ms

--- 172.18.0.126 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 1.963/1.963/1.963/0.000 ms
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:35:08.994" level="INFO">${Output} = PING 172.18.0.126 (172.18.0.126) 56(84) bytes of data.
64 bytes from 172.18.0.126: icmp_seq=1 ttl=64 time=1.96 ms

--- 172.18.0.126 ping statistics ---
1 packets transmitted, 1 received, 0% packet...</msg>
<status status="PASS" endtime="20180713 12:35:08.994" starttime="20180713 12:35:08.992"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:08.998" starttime="20180713 12:35:08.997"></status>
</kw>
<msg timestamp="20180713 12:35:08.999" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180713 12:35:08.999" starttime="20180713 12:35:08.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:09.001" starttime="20180713 12:35:08.999"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20180713 12:35:09.002" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20180713 12:35:09.002" starttime="20180713 12:35:09.001"></status>
</kw>
<status status="PASS" endtime="20180713 12:35:09.003" starttime="20180713 12:35:03.976"></status>
</kw>
<status status="PASS" endtime="20180713 12:35:09.003" starttime="20180713 12:35:03.976"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Reboot Completed,Server is UP...............!</arg>
</arguments>
<msg timestamp="20180713 12:35:09.004" level="INFO">Reboot Completed,Server is UP...............!</msg>
<status status="PASS" endtime="20180713 12:35:09.004" starttime="20180713 12:35:09.003"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>Reboot Completed,Server is UP...............!</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:09.006" starttime="20180713 12:35:09.005"></status>
</kw>
<status status="PASS" endtime="20180713 12:35:09.007" starttime="20180713 12:34:26.749"></status>
</kw>
<kw name="known_hostremoval" library="Genric_Keywords">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm /root/.ssh/known_hosts</arg>
</arguments>
<msg timestamp="20180713 12:35:09.017" level="INFO">rm /root/.ssh/known_hosts</msg>
<status status="PASS" endtime="20180713 12:35:09.017" starttime="20180713 12:35:09.008"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:35:14.018" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:35:14.018" starttime="20180713 12:35:09.018"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg timestamp="20180713 12:35:14.027" level="INFO">rm: remove regular file ‘/root/.ssh/known_hosts’? yes</msg>
<status status="PASS" endtime="20180713 12:35:14.027" starttime="20180713 12:35:14.019"></status>
</kw>
<status status="PASS" endtime="20180713 12:35:14.028" starttime="20180713 12:35:09.007"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>************* SBC-Demo VM creation is Completed ***********</arg>
</arguments>
<msg timestamp="20180713 12:35:14.029" level="INFO">************* SBC-Demo VM creation is Completed ***********</msg>
<status status="PASS" endtime="20180713 12:35:14.030" starttime="20180713 12:35:14.029"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*** SBC-Demo VM creation is Completed ***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:14.032" starttime="20180713 12:35:14.030"></status>
</kw>
<status status="PASS" endtime="20180713 12:35:14.033" starttime="20180713 12:32:41.690"></status>
</kw>
<kw name="Onboard_Validation" library="Oracle_SBC_Keywords">
<arguments>
<arg>${Index}</arg>
</arguments>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:14.038" starttime="20180713 12:35:14.037"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:14.039" starttime="20180713 12:35:14.039"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${Index}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:14.041" starttime="20180713 12:35:14.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>***************************** Validation of the created VNF inthe available NOVA VNF list Started**********************</arg>
</arguments>
<msg timestamp="20180713 12:35:14.043" level="INFO">***************************** Validation of the created VNF inthe available NOVA VNF list Started**********************</msg>
<status status="PASS" endtime="20180713 12:35:14.043" starttime="20180713 12:35:14.042"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>***Validation \ VNF creation ***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:14.045" starttime="20180713 12:35:14.044"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova list |grep -i</arg>
<arg>${VNFName}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180713 12:35:14.047" level="INFO">${str} = nova list |grep -i Test_REQ</msg>
<status status="PASS" endtime="20180713 12:35:14.047" starttime="20180713 12:35:14.046"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180713 12:35:14.056" level="INFO">nova list |grep -i Test_REQ</msg>
<status status="PASS" endtime="20180713 12:35:14.057" starttime="20180713 12:35:14.050"></status>
</kw>
<status status="PASS" endtime="20180713 12:35:14.057" starttime="20180713 12:35:14.048"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:35:19.058" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:35:19.058" starttime="20180713 12:35:14.057"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:19.060" level="INFO">| abd5cc17-5f01-407a-b1f3-f830d0f76db5 | [01;31m[KTest_REQ[m[K                                   | ACTIVE  | -          | Running     | NS1-PF=10.80.1.243, 10.80.1.244; AN-MGMT=172.18.0.126                                                      |
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:35:19.061" level="INFO">${output} = | abd5cc17-5f01-407a-b1f3-f830d0f76db5 | [01;31m[KTest_REQ[m[K                                   | ACTIVE  | -          | Running     | NS1-PF=10.80.1.243, 10.80.1.244; AN-MGMT=172.18.0.126       ...</msg>
<status status="PASS" endtime="20180713 12:35:19.061" starttime="20180713 12:35:19.059"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${VNFName}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:19.063" starttime="20180713 12:35:19.061"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*** Onboard Validation Completed***</arg>
</arguments>
<msg timestamp="20180713 12:35:19.064" level="INFO">*** Onboard Validation Completed***</msg>
<status status="PASS" endtime="20180713 12:35:19.065" starttime="20180713 12:35:19.064"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>***Onboard Validation Completed***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:19.067" starttime="20180713 12:35:19.065"></status>
</kw>
<status status="PASS" endtime="20180713 12:35:19.067" starttime="20180713 12:35:14.035"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Print Logger</arg>
<arg>***Onboard_Validation Completed***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:19.070" starttime="20180713 12:35:19.069"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Print Logger</arg>
<arg>*******AvailabilityZone_Validation in progress*******</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:19.072" starttime="20180713 12:35:19.071"></status>
</kw>
<kw name="AvailabilityZone_Validation" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:19.076" starttime="20180713 12:35:19.075"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:19.077" starttime="20180713 12:35:19.076"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Print Logger</arg>
<arg>*******Verifying the zone nova:compute is available***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:19.079" starttime="20180713 12:35:19.078"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova show \ ${VNFName} | egrep -i 'OS-EXT-AZ:availability_zone|OS-EXT-SRV-ATTR:host' | awk -F "|" '{ print $3}'</arg>
</arguments>
<msg timestamp="20180713 12:35:19.088" level="INFO">nova show  Test_REQ | egrep -i 'OS-EXT-AZ:a vailability_zone|OS-EXT-SRV-ATTR:host' | awk -F "|" '{ print $3}'</msg>
<status status="PASS" endtime="20180713 12:35:19.088" starttime="20180713 12:35:19.080"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:35:22.089" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:35:22.089" starttime="20180713 12:35:19.089"></status>
</kw>
<kw name="Split String From Right" library="String">
<doc>Splits the ``string`` using ``separator`` starting from right.</doc>
<arguments>
<arg>${AvZone}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20180713 12:35:22.092" level="INFO">@{list} = [ nova | compute1 ]</msg>
<status status="PASS" endtime="20180713 12:35:22.092" starttime="20180713 12:35:22.090"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Zone}</var>
</assign>
<msg timestamp="20180713 12:35:22.094" level="INFO">${Zone} = compute1</msg>
<status status="PASS" endtime="20180713 12:35:22.095" starttime="20180713 12:35:22.093"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:22.096" level="INFO">nova                                                               
 compute1                                                           
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:35:22.097" level="INFO">${output} =  nova                                                               
 compute1                                                           
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:35:22.097" starttime="20180713 12:35:22.095"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${Zone}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:22.099" starttime="20180713 12:35:22.098"></status>
</kw>
<status status="PASS" endtime="20180713 12:35:22.100" starttime="20180713 12:35:19.073"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Print Logger</arg>
<arg>***NOVA:compute zone is available &amp; successfully validated***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:22.103" starttime="20180713 12:35:22.102"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Print Logger</arg>
<arg>*******Mgmt IP assignment inprogress*******</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:22.105" starttime="20180713 12:35:22.104"></status>
</kw>
<kw name="Networks_Validation" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:22.108" starttime="20180713 12:35:22.108"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:22.110" starttime="20180713 12:35:22.109"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20180713 12:35:22.118" level="INFO">nova list | grep -i Test_REQ| awk -F ";" '{ print $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20180713 12:35:22.119" starttime="20180713 12:35:22.111"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:35:27.120" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:35:27.120" starttime="20180713 12:35:22.119"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:27.122" level="INFO">172.18.0.126
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:35:27.122" level="INFO">${output} = 172.18.0.126
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:35:27.122" starttime="20180713 12:35:27.121"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:27.124" level="INFO">${output} = [u'172.18.0.126', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180713 12:35:27.124" starttime="20180713 12:35:27.123"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${MGmt_IP}</var>
</assign>
<msg timestamp="20180713 12:35:27.126" level="INFO">${MGmt_IP} = 172.18.0.126</msg>
<status status="PASS" endtime="20180713 12:35:27.126" starttime="20180713 12:35:27.125"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova show ${VNFName}| grep network</arg>
</arguments>
<msg timestamp="20180713 12:35:27.132" level="INFO">nova show Test_REQ| grep network</msg>
<status status="PASS" endtime="20180713 12:35:27.133" starttime="20180713 12:35:27.127"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>14</arg>
</arguments>
<msg timestamp="20180713 12:35:41.134" level="INFO">Slept 14 seconds</msg>
<status status="PASS" endtime="20180713 12:35:41.135" starttime="20180713 12:35:27.133"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:41.136" level="INFO">| AN-MGMT [01;31m[Knetwork[m[K                      | 172.18.0.126                                                       |
| NS1-PF [01;31m[Knetwork[m[K                       | 10.80.1.243, 10.80.1.244                                           |
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:35:41.137" level="INFO">${output} = | AN-MGMT [01;31m[Knetwork[m[K                      | 172.18.0.126                                                       |
| NS1-PF [01;31m[Knetwork[m[K                       | 10.80.1.243, 1...</msg>
<status status="PASS" endtime="20180713 12:35:41.137" starttime="20180713 12:35:41.135"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>AN-MGMT</arg>
<arg>${MGmt_IP}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:41.139" starttime="20180713 12:35:41.138"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Print Logger</arg>
<arg>***Mgmt ip assignemnt is done successfully***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:41.141" starttime="20180713 12:35:41.140"></status>
</kw>
<status status="PASS" endtime="20180713 12:35:41.141" starttime="20180713 12:35:22.106"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Print Logger</arg>
<arg>*******Mgmt ip assigned &amp; the interfaces are created successfully*******</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:41.144" starttime="20180713 12:35:41.143"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>***SBC Configuration In Progress***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:41.149" starttime="20180713 12:35:41.147"></status>
</kw>
<kw name="SBC Configuration" library="Oracle_SBC_Keywords">
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******Port Updation is in progress*******</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:41.153" starttime="20180713 12:35:41.151"></status>
</kw>
<kw name="SBC_PortUpdation" library="Oracle_SBC_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>***Port UpdationStart***</arg>
</arguments>
<msg timestamp="20180713 12:35:41.155" level="INFO">***Port UpdationStart***</msg>
<status status="PASS" endtime="20180713 12:35:41.155" starttime="20180713 12:35:41.154"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:41.157" starttime="20180713 12:35:41.156"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:35:41.158" starttime="20180713 12:35:41.158"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf value.txt</arg>
</arguments>
<msg timestamp="20180713 12:35:41.167" level="INFO">rm -rf value.txt</msg>
<status status="PASS" endtime="20180713 12:35:41.167" starttime="20180713 12:35:41.159"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}|awk -F "=" '{print $2}'|awk -F "," '{print $1}'</arg>
</arguments>
<msg timestamp="20180713 12:35:41.176" level="INFO">[root@controller ~(keystone_admin)]# nova list | grep -i Test_REQ|awk -F "=" '{p rint $2}'|awk -F "," '{print $1}'</msg>
<status status="PASS" endtime="20180713 12:35:41.177" starttime="20180713 12:35:41.168"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:35:45.178" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:35:45.178" starttime="20180713 12:35:41.177"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:45.179" level="INFO">10.80.1.243
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:35:45.179" level="INFO">${output} = 10.80.1.243
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:35:45.179" starttime="20180713 12:35:45.178"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:45.181" level="INFO">${output} = [u'10.80.1.243', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180713 12:35:45.181" starttime="20180713 12:35:45.180"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${IP1}</var>
</assign>
<msg timestamp="20180713 12:35:45.182" level="INFO">${IP1} = 10.80.1.243</msg>
<status status="PASS" endtime="20180713 12:35:45.182" starttime="20180713 12:35:45.181"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${IP1}</arg>
</arguments>
<msg timestamp="20180713 12:35:45.183" level="INFO">${IP1} = 10.80.1.243</msg>
<status status="PASS" endtime="20180713 12:35:45.183" starttime="20180713 12:35:45.183"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180713 12:35:45.186" level="INFO">clear</msg>
<status status="PASS" endtime="20180713 12:35:45.186" starttime="20180713 12:35:45.183"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}|awk -F "=" '{print $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</arg>
</arguments>
<msg timestamp="20180713 12:35:45.192" level="INFO">[H[J[root@controller ~(keystone_admin)]# nova list | grep -i Test_REQ|awk -F "=" '{p rint $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</msg>
<status status="PASS" endtime="20180713 12:35:45.192" starttime="20180713 12:35:45.187"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:35:49.192" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:35:49.192" starttime="20180713 12:35:45.192"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:49.192" level="INFO">10.80.1.244
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:35:49.192" level="INFO">${output} =  10.80.1.244
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:35:49.192" starttime="20180713 12:35:49.192"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:49.193" level="INFO">${output} = [u'10.80.1.244', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180713 12:35:49.193" starttime="20180713 12:35:49.193"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${IP2}</var>
</assign>
<msg timestamp="20180713 12:35:49.194" level="INFO">${IP2} = 10.80.1.244</msg>
<status status="PASS" endtime="20180713 12:35:49.194" starttime="20180713 12:35:49.193"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${IP2}</arg>
</arguments>
<msg timestamp="20180713 12:35:49.195" level="INFO">${IP2} = 10.80.1.244</msg>
<status status="PASS" endtime="20180713 12:35:49.195" starttime="20180713 12:35:49.194"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180713 12:35:49.198" level="INFO">clear</msg>
<status status="PASS" endtime="20180713 12:35:49.198" starttime="20180713 12:35:49.195"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20180713 12:35:49.203" level="INFO">[H[J[root@controller ~(keystone_admin)]# nova list | grep -i Test_REQ| awk -F ";" '{ print $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20180713 12:35:49.203" starttime="20180713 12:35:49.199"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:35:54.204" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:35:54.204" starttime="20180713 12:35:49.204"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:54.204" level="INFO">172.18.0.126
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:35:54.204" level="INFO">${output} = 172.18.0.126
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:35:54.204" starttime="20180713 12:35:54.204"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:54.205" level="INFO">${output} = [u'172.18.0.126', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180713 12:35:54.205" starttime="20180713 12:35:54.205"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${MGmt_IP}</var>
</assign>
<msg timestamp="20180713 12:35:54.205" level="INFO">${MGmt_IP} = 172.18.0.126</msg>
<status status="PASS" endtime="20180713 12:35:54.205" starttime="20180713 12:35:54.205"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180713 12:35:54.206" level="INFO">${MGmt_IP} = 172.18.0.126</msg>
<status status="PASS" endtime="20180713 12:35:54.206" starttime="20180713 12:35:54.206"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180713 12:35:54.209" level="INFO">clear</msg>
<status status="PASS" endtime="20180713 12:35:54.210" starttime="20180713 12:35:54.206"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>neutron port-list | grep -i ${IP1} |awk -F "|" '{print $2}'</arg>
</arguments>
<msg timestamp="20180713 12:35:54.214" level="INFO">[H[J[root@controller ~(keystone_admin)]# neutron port-list | grep -i 10.80.1.243 |aw k -F "|" '{print $2}'</msg>
<status status="PASS" endtime="20180713 12:35:54.214" starttime="20180713 12:35:54.210"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:35:57.214" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:35:57.214" starttime="20180713 12:35:54.214"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:35:57.216" level="INFO">159cc35e-817c-4a7f-b4ba-95312940aee8 
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:35:57.217" level="INFO">${output} =  159cc35e-817c-4a7f-b4ba-95312940aee8 
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:35:57.217" starttime="20180713 12:35:57.215"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>@{output}</var>
</assign>
<msg timestamp="20180713 12:35:57.219" level="INFO">@{output} = [ 159cc35e-817c-4a7f-b4ba-95312940aee8 | [root@controller | ~(keystone_admin)]# ]</msg>
<status status="PASS" endtime="20180713 12:35:57.219" starttime="20180713 12:35:57.217"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${port-1}</var>
</assign>
<msg timestamp="20180713 12:35:57.221" level="INFO">${port-1} = 159cc35e-817c-4a7f-b4ba-95312940aee8</msg>
<status status="PASS" endtime="20180713 12:35:57.222" starttime="20180713 12:35:57.220"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>neutron port-update</arg>
<arg>${port-1}</arg>
<arg>--allowed-address-pairs type=dict list=true</arg>
<arg>ip_address=${IP1}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180713 12:35:57.225" level="INFO">${str} = neutron port-update 159cc35e-817c-4a7f-b4ba-95312940aee8 --allowed-address-pairs type=dict list=true ip_address=10.80.1.243</msg>
<status status="PASS" endtime="20180713 12:35:57.225" starttime="20180713 12:35:57.223"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180713 12:35:57.244" level="INFO">neutron port-update 159cc35e-817c-4a7f-b4ba -95312940aee8 --allowed-address-pairs type=dict list=true ip_address=10.80.1.243 [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K3</msg>
<status status="PASS" endtime="20180713 12:35:57.245" starttime="20180713 12:35:57.226"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:36:00.245" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:36:00.245" starttime="20180713 12:35:57.245"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:36:00.247" level="INFO">Updated port: 159cc35e-817c-4a7f-b4ba-95312940aee8
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:36:00.248" level="INFO">${output} = Updated port: 159cc35e-817c-4a7f-b4ba-95312940aee8
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:36:00.248" starttime="20180713 12:36:00.246"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180713 12:36:00.257" level="INFO">clear</msg>
<status status="PASS" endtime="20180713 12:36:00.258" starttime="20180713 12:36:00.248"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>neutron port-list | grep -i ${IP2} |awk -F "|" '{print $2}'</arg>
</arguments>
<msg timestamp="20180713 12:36:00.268" level="INFO">[H[J[root@controller ~(keystone_admin)]# neutron port-list | grep -i 10.80.1.244 |aw k -F "|" '{print $2}'</msg>
<status status="PASS" endtime="20180713 12:36:00.268" starttime="20180713 12:36:00.259"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:36:03.270" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:36:03.270" starttime="20180713 12:36:00.269"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:36:03.272" level="INFO">1dcd5097-440d-4492-9d63-9d3bf256374c 
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:36:03.273" level="INFO">${output} =  1dcd5097-440d-4492-9d63-9d3bf256374c 
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:36:03.273" starttime="20180713 12:36:03.271"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>@{output}</var>
</assign>
<msg timestamp="20180713 12:36:03.275" level="INFO">@{output} = [ 1dcd5097-440d-4492-9d63-9d3bf256374c | [root@controller | ~(keystone_admin)]# ]</msg>
<status status="PASS" endtime="20180713 12:36:03.275" starttime="20180713 12:36:03.274"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${port-2}</var>
</assign>
<msg timestamp="20180713 12:36:03.277" level="INFO">${port-2} = 1dcd5097-440d-4492-9d63-9d3bf256374c</msg>
<status status="PASS" endtime="20180713 12:36:03.278" starttime="20180713 12:36:03.276"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>neutron port-update</arg>
<arg>${port-2}</arg>
<arg>--allowed-address-pairs type=dict list=true</arg>
<arg>ip_address=${IP2}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180713 12:36:03.280" level="INFO">${str} = neutron port-update 1dcd5097-440d-4492-9d63-9d3bf256374c --allowed-address-pairs type=dict list=true ip_address=10.80.1.244</msg>
<status status="PASS" endtime="20180713 12:36:03.281" starttime="20180713 12:36:03.278"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180713 12:36:03.304" level="INFO">neutron port-update 1dcd5097-440d-4492-9d63 -9d3bf256374c --allowed-address-pairs type=dict list=true ip_address=10.80.1.244 [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K4</msg>
<status status="PASS" endtime="20180713 12:36:03.304" starttime="20180713 12:36:03.282"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:36:05.305" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:36:05.306" starttime="20180713 12:36:03.305"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:36:05.307" level="INFO">Updated port: 1dcd5097-440d-4492-9d63-9d3bf256374c
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:36:05.308" level="INFO">${output} = Updated port: 1dcd5097-440d-4492-9d63-9d3bf256374c
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:36:05.308" starttime="20180713 12:36:05.306"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180713 12:36:05.317" level="INFO">clear</msg>
<status status="PASS" endtime="20180713 12:36:05.318" starttime="20180713 12:36:05.309"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>neutron port-list | grep -i ${MGmt_IP}|awk -F "|" '{print $2}'</arg>
</arguments>
<msg timestamp="20180713 12:36:05.327" level="INFO">[H[J[root@controller ~(keystone_admin)]# neutron port-list | grep -i 172.18.0.126|aw k -F "|" '{print $2}'</msg>
<status status="PASS" endtime="20180713 12:36:05.327" starttime="20180713 12:36:05.319"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:36:08.329" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:36:08.329" starttime="20180713 12:36:05.328"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output3}</var>
</assign>
<msg timestamp="20180713 12:36:08.331" level="INFO">a3dc6da9-2d7a-4b15-ae66-bc8e9b8bb5b6 
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:36:08.332" level="INFO">${output3} =  a3dc6da9-2d7a-4b15-ae66-bc8e9b8bb5b6 
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:36:08.332" starttime="20180713 12:36:08.330"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output3}</arg>
</arguments>
<assign>
<var>@{output3}</var>
</assign>
<msg timestamp="20180713 12:36:08.334" level="INFO">@{output3} = [ a3dc6da9-2d7a-4b15-ae66-bc8e9b8bb5b6 | [root@controller | ~(keystone_admin)]# ]</msg>
<status status="PASS" endtime="20180713 12:36:08.335" starttime="20180713 12:36:08.333"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output3}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${port-3}</var>
</assign>
<msg timestamp="20180713 12:36:08.337" level="INFO">${port-3} = a3dc6da9-2d7a-4b15-ae66-bc8e9b8bb5b6</msg>
<status status="PASS" endtime="20180713 12:36:08.337" starttime="20180713 12:36:08.336"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>neutron port-update</arg>
<arg>${port-3}</arg>
<arg>--allowed-address-pairs type=dict list=true</arg>
<arg>ip_address=${MGmt_IP}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180713 12:36:08.340" level="INFO">${str} = neutron port-update a3dc6da9-2d7a-4b15-ae66-bc8e9b8bb5b6 --allowed-address-pairs type=dict list=true ip_address=172.18.0.126</msg>
<status status="PASS" endtime="20180713 12:36:08.340" starttime="20180713 12:36:08.338"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180713 12:36:08.353" level="INFO">neutron port-update a3dc6da9-2d7a-4b15-ae66 -bc8e9b8bb5b6 --allowed-address-pairs type=dict list=true ip_address=172.18.0.12 6</msg>
<status status="PASS" endtime="20180713 12:36:08.353" starttime="20180713 12:36:08.341"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:36:11.354" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:36:11.354" starttime="20180713 12:36:08.354"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:36:11.356" level="INFO">Updated port: a3dc6da9-2d7a-4b15-ae66-bc8e9b8bb5b6
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180713 12:36:11.356" level="INFO">${output} = Updated port: a3dc6da9-2d7a-4b15-ae66-bc8e9b8bb5b6
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180713 12:36:11.356" starttime="20180713 12:36:11.355"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>***Port Updation Complete***</arg>
</arguments>
<msg timestamp="20180713 12:36:11.357" level="INFO">***Port Updation Complete***</msg>
<status status="PASS" endtime="20180713 12:36:11.358" starttime="20180713 12:36:11.357"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20180713 12:36:11.359" starttime="20180713 12:36:11.358"></status>
</kw>
<status status="PASS" endtime="20180713 12:36:11.359" starttime="20180713 12:35:41.153"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******Port Updation is successfull*******</arg>
</arguments>
<status status="PASS" endtime="20180713 12:36:11.361" starttime="20180713 12:36:11.360"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>120</arg>
</arguments>
<msg timestamp="20180713 12:38:11.370" level="INFO">Slept 2 minutes</msg>
<status status="PASS" endtime="20180713 12:38:11.370" starttime="20180713 12:36:11.362"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******Password Updation is in progress*******</arg>
</arguments>
<status status="PASS" endtime="20180713 12:38:11.370" starttime="20180713 12:38:11.370"></status>
</kw>
<kw name="PasswordUpdation" library="Oracle_SBC_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>***Password Updation Start***</arg>
</arguments>
<msg timestamp="20180713 12:38:11.370" level="INFO">***Password Updation Start***</msg>
<status status="PASS" endtime="20180713 12:38:11.370" starttime="20180713 12:38:11.370"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180713 12:38:21.372" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180713 12:38:21.372" starttime="20180713 12:38:11.370"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180713 12:38:21.372" level="INFO">ssh -o "StrictHostKeyChecking no" user@172. 18.0.126</msg>
<status status="PASS" endtime="20180713 12:38:21.372" starttime="20180713 12:38:21.372"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:38:24.383" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:38:24.383" starttime="20180713 12:38:21.372"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_Pwd}</arg>
</arguments>
<msg timestamp="20180713 12:38:24.383" level="INFO">Warning: Permanently added '172.18.0.126' (RSA) to the list of known hosts.</msg>
<status status="PASS" endtime="20180713 12:38:24.383" starttime="20180713 12:38:24.383"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:38:28.392" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:38:28.392" starttime="20180713 12:38:24.383"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20180713 12:38:28.392" level="INFO">user@172.18.0.126's password:</msg>
<status status="PASS" endtime="20180713 12:38:28.392" starttime="20180713 12:38:28.392"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:38:31.393" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:38:31.393" starttime="20180713 12:38:28.392"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:38:31.393" starttime="20180713 12:38:31.393"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:38:35.403" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:38:35.403" starttime="20180713 12:38:31.393"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:38:35.403" level="INFO">*ALERT*
*****************************************************************
user password has not been set. Please set password now.
*****************************************************************
** Only alphabetic (upper or lower case), numeric and punctuation
** characters are allowed in the password.
** Password must be 8 - 64 characters,
** and have 3 of the 4 following character classes :
** - lower case alpha
** - upper case alpha
** - numerals
** - punctuation
*****************************************************************
Enter New Password: 
Confirm New Password: 

Notifications:
- No Valid License Present! (aid: 327702, tid: 3)
&gt;</msg>
<msg timestamp="20180713 12:38:35.403" level="INFO">${output} = *ALERT*
*****************************************************************
user password has not been set. Please set password now.
*****************************************************************...</msg>
<status status="PASS" endtime="20180713 12:38:35.403" starttime="20180713 12:38:35.403"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:38:38.413" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:38:38.414" starttime="20180713 12:38:35.403"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>en</arg>
</arguments>
<msg timestamp="20180713 12:38:38.415" level="INFO">en</msg>
<status status="PASS" endtime="20180713 12:38:38.415" starttime="20180713 12:38:38.414"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:38:41.426" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:38:41.426" starttime="20180713 12:38:38.415"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_EN_Password}</arg>
</arguments>
<msg timestamp="20180713 12:38:41.426" level="INFO">Password:</msg>
<status status="PASS" endtime="20180713 12:38:41.426" starttime="20180713 12:38:41.426"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:38:46.428" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:38:46.428" starttime="20180713 12:38:41.426"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20180713 12:38:46.428" level="INFO">*ALERT*</msg>
<status status="PASS" endtime="20180713 12:38:46.428" starttime="20180713 12:38:46.428"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:38:51.440" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:38:51.440" starttime="20180713 12:38:46.428"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20180713 12:38:51.440" level="INFO">*****************************************************************</msg>
<status status="PASS" endtime="20180713 12:38:51.440" starttime="20180713 12:38:51.440"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>6</arg>
</arguments>
<msg timestamp="20180713 12:38:57.446" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20180713 12:38:57.446" starttime="20180713 12:38:51.440"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:38:57.446" level="INFO">admin password has not been set. Please set password now.
*****************************************************************
** Only alphabetic (upper or lower case), numeric and punctuation
** characters are allowed in the password.
** Password must be 8 - 64 characters,
** and have 3 of the 4 following character classes :
** - lower case alpha
** - upper case alpha
** - numerals
** - punctuation
*****************************************************************
Enter New Password: 
Confirm New Password: 

Notifications:
- No Valid License Present! (aid: 327702, tid: 3)
#</msg>
<msg timestamp="20180713 12:38:57.446" level="INFO">${output} = admin password has not been set. Please set password now.
*****************************************************************
** Only alphabetic (upper or lower case), numeric and punctuation
** char...</msg>
<status status="PASS" endtime="20180713 12:38:57.446" starttime="20180713 12:38:57.446"></status>
</kw>
<kw name="License" library="Oracle_SBC_Keywords">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>setup product</arg>
</arguments>
<msg timestamp="20180713 12:38:57.446" level="INFO">setup product</msg>
<status status="PASS" endtime="20180713 12:38:57.446" starttime="20180713 12:38:57.446"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:38:59.474" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:38:59.474" starttime="20180713 12:38:57.446"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20180713 12:38:59.474" starttime="20180713 12:38:59.474"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:39:01.486" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:39:01.486" starttime="20180713 12:38:59.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20180713 12:39:01.486" level="INFO">--------------------------------------------------------------</msg>
<status status="PASS" endtime="20180713 12:39:01.486" starttime="20180713 12:39:01.486"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:39:03.489" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:39:03.489" starttime="20180713 12:39:01.486"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>s</arg>
</arguments>
<msg timestamp="20180713 12:39:03.489" level="INFO">WARNING:</msg>
<status status="PASS" endtime="20180713 12:39:03.489" starttime="20180713 12:39:03.489"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:39:05.502" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:39:05.502" starttime="20180713 12:39:03.489"></status>
</kw>
<status status="PASS" endtime="20180713 12:39:05.502" starttime="20180713 12:38:57.446"></status>
</kw>
<kw name="License" library="Oracle_SBC_Keywords">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>setup product</arg>
</arguments>
<msg timestamp="20180713 12:39:05.502" level="INFO">Alteration of product alone or in conjunction with entitlement</msg>
<status status="PASS" endtime="20180713 12:39:05.502" starttime="20180713 12:39:05.502"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:39:07.514" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:39:07.514" starttime="20180713 12:39:05.502"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20180713 12:39:07.514" level="INFO">changes will not be complete until system reboot</msg>
<status status="PASS" endtime="20180713 12:39:07.514" starttime="20180713 12:39:07.514"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:39:09.529" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:39:09.529" starttime="20180713 12:39:07.514"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:09.529" starttime="20180713 12:39:09.529"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:39:11.541" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:39:11.541" starttime="20180713 12:39:09.529"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>s</arg>
</arguments>
<msg timestamp="20180713 12:39:11.541" level="INFO">Last Modified</msg>
<status status="PASS" endtime="20180713 12:39:11.541" starttime="20180713 12:39:11.541"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:39:13.553" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:39:13.553" starttime="20180713 12:39:11.541"></status>
</kw>
<status status="PASS" endtime="20180713 12:39:13.553" starttime="20180713 12:39:05.502"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:39:13.553" level="INFO">--------------------------------------------------------------</msg>
<status status="PASS" endtime="20180713 12:39:13.553" starttime="20180713 12:39:13.553"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:39:13.553" level="INFO">1 : Product       : Uninitialized</msg>
<status status="PASS" endtime="20180713 12:39:13.553" starttime="20180713 12:39:13.553"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20180713 12:39:13.553" level="INFO">Enter 1 to modify, d' to display, 's' to save, 'q' to exit. [s]: 1

  Product
    1 - Session Border Controller
    2 - Session Router - Session Stateful
    3 - Session Router - Transaction Stateful
    4 - Peering Session Border Controller
  Enter choice     : 1

Enter 1 to modify, d' to display, 's' to save, 'q' to exit. [s]: s
save SUCCESS

Notifications:
- No Valid License Present! (aid: 327702, tid: 3)
# setup product

--------------------------------------------------------------
WARNING:
Alteration of product alone or in conjunction with entitlement
changes will not be complete until system reboot

Last Modified 2018-07-13 07:00:23
--------------------------------------------------------------
 1 : Product       : Session Border Controller

Enter 1 to modify, d' to display, 's' to save, 'q' to exit. [s]: 1

  Product
    1 - Session Border Controller
    2 - Session Router - Session Stateful
    3 - Session Router - Transaction Stateful
    4 - Peering Session Border Controller
  Enter choice     : 1

Enter 1 to modify, d' to display, 's' to save, 'q' to exit. [s]: s
save SUCCESS
# exit
&gt;</msg>
<status status="PASS" endtime="20180713 12:39:13.553" starttime="20180713 12:39:13.553"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>***portUpdation completed***</arg>
</arguments>
<msg timestamp="20180713 12:39:13.553" level="INFO">***portUpdation completed***</msg>
<status status="PASS" endtime="20180713 12:39:13.569" starttime="20180713 12:39:13.553"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180713 12:39:23.576" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180713 12:39:23.576" starttime="20180713 12:39:13.569"></status>
</kw>
<status status="PASS" endtime="20180713 12:39:23.576" starttime="20180713 12:38:11.370"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******Password Updation is successfull*******</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:23.576" starttime="20180713 12:39:23.576"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******SBC configuration is in progress*******</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:23.576" starttime="20180713 12:39:23.576"></status>
</kw>
<kw name="Setup Entitlements" library="Oracle_SBC_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>****************SetupEntitlements Start************</arg>
</arguments>
<msg timestamp="20180713 12:39:23.576" level="INFO">****************SetupEntitlements Start************</msg>
<status status="PASS" endtime="20180713 12:39:23.576" starttime="20180713 12:39:23.576"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180713 12:39:23.576" level="INFO">exit</msg>
<status status="PASS" endtime="20180713 12:39:23.576" starttime="20180713 12:39:23.576"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:39:27.585" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:39:27.585" starttime="20180713 12:39:23.576"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:27.585" level="INFO">Closing Session

Received disconnect from 172.18.0.126: 11: Logged out.
[root@controller ~(keystone_admin)]# ssh -o "StrictHostKeyChecking no" user@172. 18.0.126
user@172.18.0.126's password:</msg>
<msg timestamp="20180713 12:39:27.585" level="INFO">${output} = Closing Session

Received disconnect from 172.18.0.126: 11: Logged out.
[root@controller ~(keystone_admin)]# ssh -o "StrictHostKeyChecking no" user@172. 18.0.126
user@172.18.0.126's password: </msg>
<status status="PASS" endtime="20180713 12:39:27.585" starttime="20180713 12:39:27.585"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:27.585" starttime="20180713 12:39:27.585"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:39:30.596" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:39:30.596" starttime="20180713 12:39:27.585"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>en</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:30.596" starttime="20180713 12:39:30.596"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180713 12:39:40.599" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180713 12:39:40.599" starttime="20180713 12:39:30.596"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20180713 12:39:40.599" level="INFO">&gt; en</msg>
<status status="PASS" endtime="20180713 12:39:40.599" starttime="20180713 12:39:40.599"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:40.599" level="INFO">Password:</msg>
<msg timestamp="20180713 12:39:40.599" level="INFO">${output} = Password: </msg>
<status status="PASS" endtime="20180713 12:39:40.599" starttime="20180713 12:39:40.599"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:39:42.612" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:39:42.612" starttime="20180713 12:39:40.599"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>setup entitlements</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:42.612" starttime="20180713 12:39:42.612"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20180713 12:39:42.612" level="INFO"># setup entitlements</msg>
<status status="PASS" endtime="20180713 12:39:42.612" starttime="20180713 12:39:42.612"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8000</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:42.612" starttime="20180713 12:39:42.612"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:39:42.627" level="INFO">-----------------------------------------------------</msg>
<status status="PASS" endtime="20180713 12:39:42.627" starttime="20180713 12:39:42.612"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180713 12:39:42.627" level="INFO">Entitlements for Session Border Controller</msg>
<status status="PASS" endtime="20180713 12:39:42.627" starttime="20180713 12:39:42.627"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:39:42.627" level="INFO">Last Modified: Never</msg>
<status status="PASS" endtime="20180713 12:39:42.627" starttime="20180713 12:39:42.627"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180713 12:39:42.627" level="INFO">-----------------------------------------------------</msg>
<status status="PASS" endtime="20180713 12:39:42.627" starttime="20180713 12:39:42.627"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:39:42.643" level="INFO">1 : Session Capacity                     : 0</msg>
<status status="PASS" endtime="20180713 12:39:42.643" starttime="20180713 12:39:42.627"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180713 12:39:42.643" level="INFO">2 :   Accounting                         :</msg>
<status status="PASS" endtime="20180713 12:39:42.643" starttime="20180713 12:39:42.643"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:39:42.643" level="INFO">3 :   IPv4 - IPv6 Interworking           :</msg>
<status status="PASS" endtime="20180713 12:39:42.643" starttime="20180713 12:39:42.643"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180713 12:39:42.643" level="INFO">4 :   IWF (SIP-H323)                     :</msg>
<status status="PASS" endtime="20180713 12:39:42.643" starttime="20180713 12:39:42.643"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>6</arg>
</arguments>
<msg timestamp="20180713 12:39:42.643" level="INFO">5 :   Load Balancing                     :</msg>
<status status="PASS" endtime="20180713 12:39:42.643" starttime="20180713 12:39:42.643"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180713 12:39:42.643" level="INFO">6 :   Policy Server                      :</msg>
<status status="PASS" endtime="20180713 12:39:42.643" starttime="20180713 12:39:42.643"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>7</arg>
</arguments>
<msg timestamp="20180713 12:39:42.658" level="INFO">7 :   Quality of Service                 :</msg>
<status status="PASS" endtime="20180713 12:39:42.658" starttime="20180713 12:39:42.643"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180713 12:39:42.658" level="INFO">8 :   Routing                            :</msg>
<status status="PASS" endtime="20180713 12:39:42.658" starttime="20180713 12:39:42.658"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8</arg>
</arguments>
<msg timestamp="20180713 12:39:42.658" level="INFO">9 :   SIPREC Session Recording           :</msg>
<status status="PASS" endtime="20180713 12:39:42.658" starttime="20180713 12:39:42.658"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180713 12:39:42.658" level="INFO">10: IMS-AKA Endpoints                    : 0</msg>
<status status="PASS" endtime="20180713 12:39:42.658" starttime="20180713 12:39:42.658"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>9</arg>
</arguments>
<msg timestamp="20180713 12:39:42.658" level="INFO">11: IPSec Trunking Sessions              : 0</msg>
<status status="PASS" endtime="20180713 12:39:42.658" starttime="20180713 12:39:42.658"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180713 12:39:42.658" level="INFO">12: MSRP B2BUA Sessions                  : 0</msg>
<status status="PASS" endtime="20180713 12:39:42.658" starttime="20180713 12:39:42.658"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180713 12:39:42.674" level="INFO">13: SRTP Sessions                        : 0</msg>
<status status="PASS" endtime="20180713 12:39:42.674" starttime="20180713 12:39:42.658"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8000</arg>
</arguments>
<msg timestamp="20180713 12:39:42.674" level="INFO">14: TSCF Tunnels                         : 0</msg>
<status status="PASS" endtime="20180713 12:39:42.674" starttime="20180713 12:39:42.674"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>11</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:42.674" starttime="20180713 12:39:42.674"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1024</arg>
</arguments>
<msg timestamp="20180713 12:39:42.674" level="INFO">Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 1</msg>
<status status="PASS" endtime="20180713 12:39:42.674" starttime="20180713 12:39:42.674"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:42.674" starttime="20180713 12:39:42.674"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1024</arg>
</arguments>
<msg timestamp="20180713 12:39:42.690" level="INFO">Session Capacity (0-256000)             : 8000</msg>
<status status="PASS" endtime="20180713 12:39:42.690" starttime="20180713 12:39:42.674"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:42.705" starttime="20180713 12:39:42.690"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1024</arg>
</arguments>
<msg timestamp="20180713 12:39:42.705" level="INFO">Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 2</msg>
<status status="PASS" endtime="20180713 12:39:42.705" starttime="20180713 12:39:42.705"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:42.705" starttime="20180713 12:39:42.705"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1024</arg>
</arguments>
<msg timestamp="20180713 12:39:42.705" level="INFO">Accounting (enabled/disabled)         : enabled</msg>
<status status="PASS" endtime="20180713 12:39:42.705" starttime="20180713 12:39:42.705"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:39:45.717" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:39:45.717" starttime="20180713 12:39:42.705"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>s</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:45.717" starttime="20180713 12:39:45.717"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>con ter</arg>
</arguments>
<msg timestamp="20180713 12:39:45.717" level="INFO">Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 3</msg>
<status status="PASS" endtime="20180713 12:39:45.717" starttime="20180713 12:39:45.717"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>bootparam</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:45.717" starttime="20180713 12:39:45.717"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:39:47.729" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:39:47.729" starttime="20180713 12:39:45.717"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/boot/bzImage</arg>
</arguments>
<msg timestamp="20180713 12:39:47.729" level="INFO">IPv4 - IPv6 Interworking (enabled/disabled): enabled</msg>
<status status="PASS" endtime="20180713 12:39:47.729" starttime="20180713 12:39:47.729"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.729" level="INFO">Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 4

    IWF (SIP-H323) (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 5

    Load Balancing (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 6

    Policy Server (enabled/disabled)      : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 7

    Quality of Service (enabled/disabled) : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 8

    Routing (enabled/disabled)            : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 9

    SIPREC Session Recording (enabled/disabled): enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 10

  IMS-AKA Endpoints (0-100000)            : 8000

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 11

  IPSec Trunking Sessions (0-1024)        : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 12

  MSRP B2BUA Sessions (0-256000)          : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 13

  SRTP Sessions (0-256000)                : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 14

  TSCF Tunnels                            : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: s
SAVE SUCCEEDED
# con ter
(configure)# bootparam

'.' = clear field;  '-' = go to previous field;  q = quit

Boot File       	: /boot/bzImage /boot/bzImage
IP Address      	:</msg>
<msg timestamp="20180713 12:39:47.729" level="INFO">${output} = 
Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 4

    IWF (SIP-H323) (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]...</msg>
<status status="PASS" endtime="20180713 12:39:47.729" starttime="20180713 12:39:47.729"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.729" level="INFO">
Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 4

    IWF (SIP-H323) (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 5

    Load Balancing (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 6

    Policy Server (enabled/disabled)      : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 7

    Quality of Service (enabled/disabled) : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 8

    Routing (enabled/disabled)            : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 9

    SIPREC Session Recording (enabled/disabled): enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 10

  IMS-AKA Endpoints (0-100000)            : 8000

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 11

  IPSec Trunking Sessions (0-1024)        : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 12

  MSRP B2BUA Sessions (0-256000)          : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 13

  SRTP Sessions (0-256000)                : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 14

  TSCF Tunnels                            : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: s
SAVE SUCCEEDED
# con ter
(configure)# bootparam

'.' = clear field;  '-' = go to previous field;  q = quit

Boot File       	: /boot/bzImage /boot/bzImage
IP Address      	: </msg>
<status status="PASS" endtime="20180713 12:39:47.729" starttime="20180713 12:39:47.729"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.776" level="INFO">172.18.0.126</msg>
<status status="PASS" endtime="20180713 12:39:47.776" starttime="20180713 12:39:47.729"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.776" level="INFO">VLAN            	:</msg>
<msg timestamp="20180713 12:39:47.776" level="INFO">${output} = VLAN            	: </msg>
<status status="PASS" endtime="20180713 12:39:47.776" starttime="20180713 12:39:47.776"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.776" level="INFO">VLAN            	: </msg>
<status status="PASS" endtime="20180713 12:39:47.776" starttime="20180713 12:39:47.776"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:47.776" starttime="20180713 12:39:47.776"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.776" level="INFO">${output} = </msg>
<status status="PASS" endtime="20180713 12:39:47.776" starttime="20180713 12:39:47.776"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.776" level="INFO"></msg>
<status status="PASS" endtime="20180713 12:39:47.776" starttime="20180713 12:39:47.776"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>255.255.255.0</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:47.792" starttime="20180713 12:39:47.776"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.792" level="INFO">Netmask         	:</msg>
<msg timestamp="20180713 12:39:47.792" level="INFO">${output} = Netmask         	: </msg>
<status status="PASS" endtime="20180713 12:39:47.792" starttime="20180713 12:39:47.792"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.792" level="INFO">Netmask         	: </msg>
<status status="PASS" endtime="20180713 12:39:47.792" starttime="20180713 12:39:47.792"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>172.18.0.1</arg>
</arguments>
<msg timestamp="20180713 12:39:47.792" level="INFO">255.255.255.0</msg>
<status status="PASS" endtime="20180713 12:39:47.792" starttime="20180713 12:39:47.792"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.792" level="INFO">Gateway         	:</msg>
<msg timestamp="20180713 12:39:47.792" level="INFO">${output} = Gateway         	: </msg>
<status status="PASS" endtime="20180713 12:39:47.792" starttime="20180713 12:39:47.792"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.792" level="INFO">Gateway         	: </msg>
<status status="PASS" endtime="20180713 12:39:47.792" starttime="20180713 12:39:47.792"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:47.792" starttime="20180713 12:39:47.792"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.792" level="INFO">${output} = </msg>
<status status="PASS" endtime="20180713 12:39:47.792" starttime="20180713 12:39:47.792"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.792" level="INFO"></msg>
<status status="PASS" endtime="20180713 12:39:47.792" starttime="20180713 12:39:47.792"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:47.792" starttime="20180713 12:39:47.792"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.792" level="INFO">172.18.0.1
IPv6 Address    	:</msg>
<msg timestamp="20180713 12:39:47.792" level="INFO">${output} = 172.18.0.1
IPv6 Address    	: </msg>
<status status="PASS" endtime="20180713 12:39:47.792" starttime="20180713 12:39:47.792"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.792" level="INFO">172.18.0.1
IPv6 Address    	: </msg>
<status status="PASS" endtime="20180713 12:39:47.792" starttime="20180713 12:39:47.792"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:47.807" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.807" level="INFO">IPv6 Gateway    	:</msg>
<msg timestamp="20180713 12:39:47.807" level="INFO">${output} = 
IPv6 Gateway    	: </msg>
<status status="PASS" endtime="20180713 12:39:47.807" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.807" level="INFO">
IPv6 Gateway    	: </msg>
<status status="PASS" endtime="20180713 12:39:47.807" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:47.807" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.807" level="INFO">${output} = </msg>
<status status="PASS" endtime="20180713 12:39:47.807" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.807" level="INFO"></msg>
<status status="PASS" endtime="20180713 12:39:47.807" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:47.807" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.807" level="INFO">${output} = </msg>
<status status="PASS" endtime="20180713 12:39:47.807" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.807" level="INFO"></msg>
<status status="PASS" endtime="20180713 12:39:47.807" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:47.807" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.807" level="INFO">${output} = </msg>
<status status="PASS" endtime="20180713 12:39:47.807" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.807" level="INFO"></msg>
<status status="PASS" endtime="20180713 12:39:47.807" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SBC</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:47.838" starttime="20180713 12:39:47.807"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.838" level="INFO">Host IP         	: 
FTP username    	:</msg>
<msg timestamp="20180713 12:39:47.838" level="INFO">${output} = Host IP         	: 
FTP username    	: </msg>
<status status="PASS" endtime="20180713 12:39:47.838" starttime="20180713 12:39:47.838"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.838" level="INFO">Host IP         	: 
FTP username    	: </msg>
<status status="PASS" endtime="20180713 12:39:47.838" starttime="20180713 12:39:47.838"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>VGA</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:47.838" starttime="20180713 12:39:47.838"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.838" level="INFO">FTP password    	: 
Flags           	: 
Target Name     	: SBC
Console Device  	: VGA</msg>
<msg timestamp="20180713 12:39:47.838" level="INFO">${output} = FTP password    	: 
Flags           	: 
Target Name     	: SBC
Console Device  	: VGA </msg>
<status status="PASS" endtime="20180713 12:39:47.838" starttime="20180713 12:39:47.838"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.838" level="INFO">FTP password    	: 
Flags           	: 
Target Name     	: SBC
Console Device  	: VGA </msg>
<status status="PASS" endtime="20180713 12:39:47.838" starttime="20180713 12:39:47.838"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>115200</arg>
</arguments>
<msg timestamp="20180713 12:39:47.854" level="INFO">VGA</msg>
<status status="PASS" endtime="20180713 12:39:47.854" starttime="20180713 12:39:47.838"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.854" level="INFO">Console Baudrate	: 115200</msg>
<msg timestamp="20180713 12:39:47.854" level="INFO">${output} = Console Baudrate	: 115200 </msg>
<status status="PASS" endtime="20180713 12:39:47.854" starttime="20180713 12:39:47.854"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.854" level="INFO">Console Baudrate	: 115200 </msg>
<status status="PASS" endtime="20180713 12:39:47.854" starttime="20180713 12:39:47.854"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180713 12:39:47.854" starttime="20180713 12:39:47.854"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:39:47.854" level="INFO">${output} = </msg>
<status status="PASS" endtime="20180713 12:39:47.854" starttime="20180713 12:39:47.854"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180713 12:39:47.854" level="INFO"></msg>
<status status="PASS" endtime="20180713 12:39:47.854" starttime="20180713 12:39:47.854"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:39:52.866" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:39:52.866" starttime="20180713 12:39:47.854"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:39:52.866" level="INFO">115200</msg>
<status status="PASS" endtime="20180713 12:39:52.866" starttime="20180713 12:39:52.866"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:39:57.873" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:39:57.873" starttime="20180713 12:39:52.866"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180713 12:39:57.873" level="INFO">Other           	:</msg>
<status status="PASS" endtime="20180713 12:39:57.873" starttime="20180713 12:39:57.873"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:40:02.881" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:40:02.881" starttime="20180713 12:39:57.873"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:40:02.881" starttime="20180713 12:40:02.881"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>interface-mapping</arg>
</arguments>
<msg timestamp="20180713 12:40:02.881" level="INFO">NOTE: These changed parameters will not go into effect until reboot.</msg>
<status status="PASS" endtime="20180713 12:40:02.881" starttime="20180713 12:40:02.881"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>show</arg>
</arguments>
<msg timestamp="20180713 12:40:02.881" level="INFO">Also, be aware that some boot parameters may also be changed through</msg>
<status status="PASS" endtime="20180713 12:40:02.881" starttime="20180713 12:40:02.881"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>swap wancom1 s1p0</arg>
</arguments>
<msg timestamp="20180713 12:40:02.881" level="INFO">PHY and Network Interface Configurations.</msg>
<status status="PASS" endtime="20180713 12:40:02.881" starttime="20180713 12:40:02.881"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:40:06.906" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:40:06.906" starttime="20180713 12:40:02.896"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>y</arg>
</arguments>
<status status="PASS" endtime="20180713 12:40:06.906" starttime="20180713 12:40:06.906"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:40:10.912" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:40:10.912" starttime="20180713 12:40:06.906"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:40:10.912" level="INFO">(configure)# exit</msg>
<status status="PASS" endtime="20180713 12:40:10.912" starttime="20180713 12:40:10.912"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:40:10.912" level="INFO"># ssh -o "StrictHostKeyChecking no" user@172.18.0.126</msg>
<status status="PASS" endtime="20180713 12:40:10.912" starttime="20180713 12:40:10.912"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:40:10.912" level="INFO">% command not found</msg>
<status status="PASS" endtime="20180713 12:40:10.912" starttime="20180713 12:40:10.912"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180713 12:40:20.930" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180713 12:40:20.930" starttime="20180713 12:40:10.912"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>****************Setup Entitlements Complete************</arg>
</arguments>
<msg timestamp="20180713 12:40:20.930" level="INFO">****************Setup Entitlements Complete************</msg>
<status status="PASS" endtime="20180713 12:40:20.930" starttime="20180713 12:40:20.930"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20180713 12:40:20.930" level="INFO"># Root@123
% command not found
# interface-mapping
(interface-mapping)# show
Interface Mapping Info
-------------------------------------------
Eth-IF	MAC-Addr		Label
wancom0	FA:16:3E:0A:DF:07	#generic
wancom1	FA:16:3E:00:22:03	#generic
s0p0	FA:16:3E:75:DD:95	#generic
wancom2	FF:FF:FF:FF:FF:FF	#dummy
spare	FF:FF:FF:FF:FF:FF	#dummy
s1p0	FF:FF:FF:FF:FF:FF	#dummy
s0p1	FF:FF:FF:FF:FF:FF	#dummy
s1p1	FF:FF:FF:FF:FF:FF	#dummy
s0p2	FF:FF:FF:FF:FF:FF	#dummy
s1p2	FF:FF:FF:FF:FF:FF	#dummy
s0p3	FF:FF:FF:FF:FF:FF	#dummy
s1p3	FF:FF:FF:FF:FF:FF	#dummy

(interface-mapping)# swap wancom1 s1p0
Interface Mapping Info after swapping
-------------------------------------------
Eth-IF	MAC-Addr		Label
wancom0	FA:16:3E:0A:DF:07	#generic
wancom1	FF:FF:FF:FF:FF:FF	#dummy
s0p0	FA:16:3E:75:DD:95	#generic
wancom2	FF:FF:FF:FF:FF:FF	#dummy
spare	FF:FF:FF:FF:FF:FF	#dummy
s1p0	FA:16:3E:00:22:03	#generic
s0p1	FF:FF:FF:FF:FF:FF	#dummy
s1p1	FF:FF:FF:FF:FF:FF	#dummy
s0p2	FF:FF:FF:FF:FF:FF	#dummy
s1p2	FF:FF:FF:FF:FF:FF	#dummy
s0p3	FF:FF:FF:FF:FF:FF	#dummy
s1p3	FF:FF:FF:FF:FF:FF	#dummy


Changes could affect service, and Requires Reboot to become effective.

Continue [y/n]?: y

WARNING: This change requires a reboot to become effective.
(interface-mapping)# exit
# exit
&gt; exit
Closing Session

Received disconnect from 172.18.0.126: 11: Logged out.
[root@controller ~(keystone_admin)]#</msg>
<status status="PASS" endtime="20180713 12:40:20.930" starttime="20180713 12:40:20.930"></status>
</kw>
<status status="PASS" endtime="20180713 12:40:20.930" starttime="20180713 12:39:23.576"></status>
</kw>
<kw name="Configuration" library="Oracle_SBC_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************** Configuration Start ************</arg>
</arguments>
<msg timestamp="20180713 12:40:20.930" level="INFO">**************** Configuration Start ************</msg>
<status status="PASS" endtime="20180713 12:40:20.930" starttime="20180713 12:40:20.930"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:40:25.939" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:40:25.939" starttime="20180713 12:40:20.930"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180713 12:40:25.939" level="INFO">ssh -o "StrictHostKeyChecking no" user@172. 18.0.126</msg>
<status status="PASS" endtime="20180713 12:40:25.939" starttime="20180713 12:40:25.939"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:40:30.946" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:40:30.946" starttime="20180713 12:40:25.939"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:40:30.946" level="INFO">user@172.18.0.126's password:</msg>
<msg timestamp="20180713 12:40:30.946" level="INFO">${output} = user@172.18.0.126's password: </msg>
<status status="PASS" endtime="20180713 12:40:30.946" starttime="20180713 12:40:30.946"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:40:30.946" starttime="20180713 12:40:30.946"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:40:32.959" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:40:32.959" starttime="20180713 12:40:30.946"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>en</arg>
</arguments>
<status status="PASS" endtime="20180713 12:40:32.959" starttime="20180713 12:40:32.959"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20180713 12:40:33.973" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20180713 12:40:33.973" starttime="20180713 12:40:32.959"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20180713 12:40:33.973" level="INFO">&gt; en</msg>
<status status="PASS" endtime="20180713 12:40:33.973" starttime="20180713 12:40:33.973"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180713 12:40:33.973" level="INFO">Password:</msg>
<msg timestamp="20180713 12:40:33.973" level="INFO">${output} = Password: </msg>
<status status="PASS" endtime="20180713 12:40:33.973" starttime="20180713 12:40:33.973"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:40:35.985" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:40:35.985" starttime="20180713 12:40:33.973"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>con ter</arg>
</arguments>
<status status="PASS" endtime="20180713 12:40:35.985" starttime="20180713 12:40:35.985"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>system</arg>
</arguments>
<msg timestamp="20180713 12:40:35.985" level="INFO"># con ter</msg>
<status status="PASS" endtime="20180713 12:40:35.985" starttime="20180713 12:40:35.985"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:40:37.997" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:40:37.997" starttime="20180713 12:40:35.985"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>phy-interface</arg>
</arguments>
<msg timestamp="20180713 12:40:37.997" level="INFO">(configure)# system</msg>
<status status="PASS" endtime="20180713 12:40:37.997" starttime="20180713 12:40:37.997"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>name ext</arg>
</arguments>
<msg timestamp="20180713 12:40:37.997" level="INFO">(system)# phy-interface</msg>
<status status="PASS" endtime="20180713 12:40:37.997" starttime="20180713 12:40:37.997"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>operation-type Media</arg>
</arguments>
<msg timestamp="20180713 12:40:38.044" level="INFO">(phy-interface)# name ext</msg>
<status status="PASS" endtime="20180713 12:40:38.044" starttime="20180713 12:40:37.997"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>slot 0</arg>
</arguments>
<msg timestamp="20180713 12:40:38.044" level="INFO">(phy-interface)# operation-type Media</msg>
<status status="PASS" endtime="20180713 12:40:38.044" starttime="20180713 12:40:38.044"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>port 0</arg>
</arguments>
<msg timestamp="20180713 12:40:38.075" level="INFO">(phy-interface)# slot 0</msg>
<status status="PASS" endtime="20180713 12:40:38.075" starttime="20180713 12:40:38.044"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:40:38.075" level="INFO">(phy-interface)# port 0</msg>
<status status="PASS" endtime="20180713 12:40:38.075" starttime="20180713 12:40:38.075"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:40:40.088" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:40:40.088" starttime="20180713 12:40:38.075"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>name in</arg>
</arguments>
<msg timestamp="20180713 12:40:40.088" level="INFO">(phy-interface)# done</msg>
<status status="PASS" endtime="20180713 12:40:40.088" starttime="20180713 12:40:40.088"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>operation-type Media</arg>
</arguments>
<msg timestamp="20180713 12:40:40.088" level="INFO">phy-interface</msg>
<status status="PASS" endtime="20180713 12:40:40.088" starttime="20180713 12:40:40.088"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>slot 1</arg>
</arguments>
<msg timestamp="20180713 12:40:40.088" level="INFO">name                                    ext</msg>
<status status="PASS" endtime="20180713 12:40:40.088" starttime="20180713 12:40:40.088"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:40:40.103" level="INFO">operation-type                          Media</msg>
<status status="PASS" endtime="20180713 12:40:40.103" starttime="20180713 12:40:40.088"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:40:42.118" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:40:42.118" starttime="20180713 12:40:40.103"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:40:42.118" level="INFO">port                                    0</msg>
<status status="PASS" endtime="20180713 12:40:42.118" starttime="20180713 12:40:42.118"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interface</arg>
</arguments>
<msg timestamp="20180713 12:40:42.118" level="INFO">slot                                    0</msg>
<status status="PASS" endtime="20180713 12:40:42.118" starttime="20180713 12:40:42.118"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>name ext</arg>
</arguments>
<msg timestamp="20180713 12:40:42.118" level="INFO">virtual-mac</msg>
<status status="PASS" endtime="20180713 12:40:42.118" starttime="20180713 12:40:42.118"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sub-port-id 0</arg>
</arguments>
<msg timestamp="20180713 12:40:42.133" level="INFO">admin-state                             enabled</msg>
<status status="PASS" endtime="20180713 12:40:42.133" starttime="20180713 12:40:42.118"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description toEPC</arg>
</arguments>
<msg timestamp="20180713 12:40:42.133" level="INFO">auto-negotiation                        enabled</msg>
<status status="PASS" endtime="20180713 12:40:42.133" starttime="20180713 12:40:42.133"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${IP2}</arg>
</arguments>
<msg timestamp="20180713 12:40:42.133" level="INFO">duplex-mode                             FULL</msg>
<status status="PASS" endtime="20180713 12:40:42.133" starttime="20180713 12:40:42.133"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>netmask 255.255.255.0</arg>
</arguments>
<msg timestamp="20180713 12:40:42.133" level="INFO">speed                                   100</msg>
<status status="PASS" endtime="20180713 12:40:42.133" starttime="20180713 12:40:42.133"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>gateway ${GATEWAY IP}</arg>
</arguments>
<msg timestamp="20180713 12:40:42.133" level="INFO">wancom-health-score                     50</msg>
<status status="PASS" endtime="20180713 12:40:42.133" starttime="20180713 12:40:42.133"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dns-ip-primary ${DNS IP}</arg>
</arguments>
<msg timestamp="20180713 12:40:42.133" level="INFO">overload-protection                     disabled</msg>
<status status="PASS" endtime="20180713 12:40:42.133" starttime="20180713 12:40:42.133"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dns-domain example.demo</arg>
</arguments>
<msg timestamp="20180713 12:40:42.133" level="INFO">last-modified-by                        admin@172.18.0.60</msg>
<status status="PASS" endtime="20180713 12:40:42.133" starttime="20180713 12:40:42.133"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>add-hip-ip ${IP2}</arg>
</arguments>
<msg timestamp="20180713 12:40:42.133" level="INFO">last-modified-date                      2018-07-13 07:01:58</msg>
<status status="PASS" endtime="20180713 12:40:42.133" starttime="20180713 12:40:42.133"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>add-icmp-ip ${IP2}</arg>
</arguments>
<status status="PASS" endtime="20180713 12:40:42.149" starttime="20180713 12:40:42.149"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:40:42.149" level="INFO">(phy-interface)# name in</msg>
<status status="PASS" endtime="20180713 12:40:42.149" starttime="20180713 12:40:42.149"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:40:47.161" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:40:47.161" starttime="20180713 12:40:42.149"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>name in</arg>
</arguments>
<msg timestamp="20180713 12:40:47.161" level="INFO">(phy-interface)# operation-type Media</msg>
<status status="PASS" endtime="20180713 12:40:47.161" starttime="20180713 12:40:47.161"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description toCSM</arg>
</arguments>
<msg timestamp="20180713 12:40:47.161" level="INFO">(phy-interface)# slot 1</msg>
<status status="PASS" endtime="20180713 12:40:47.161" starttime="20180713 12:40:47.161"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${IP1}</arg>
</arguments>
<msg timestamp="20180713 12:40:47.161" level="INFO">(phy-interface)# done</msg>
<status status="PASS" endtime="20180713 12:40:47.161" starttime="20180713 12:40:47.161"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>netmask 255.255.255.0</arg>
</arguments>
<msg timestamp="20180713 12:40:47.161" level="INFO">phy-interface</msg>
<status status="PASS" endtime="20180713 12:40:47.161" starttime="20180713 12:40:47.161"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>gateway ${GATEWAY IP}</arg>
</arguments>
<msg timestamp="20180713 12:40:47.176" level="INFO">name                                    in</msg>
<status status="PASS" endtime="20180713 12:40:47.176" starttime="20180713 12:40:47.161"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dns-ip-primary ${DNS IP}</arg>
</arguments>
<msg timestamp="20180713 12:40:47.176" level="INFO">operation-type                          Media</msg>
<status status="PASS" endtime="20180713 12:40:47.176" starttime="20180713 12:40:47.176"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dns-domain example.demo</arg>
</arguments>
<msg timestamp="20180713 12:40:47.176" level="INFO">port                                    0</msg>
<status status="PASS" endtime="20180713 12:40:47.176" starttime="20180713 12:40:47.176"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>add-hip-ip ${IP1}</arg>
</arguments>
<msg timestamp="20180713 12:40:47.176" level="INFO">slot                                    1</msg>
<status status="PASS" endtime="20180713 12:40:47.176" starttime="20180713 12:40:47.176"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>add-icmp-ip ${IP1}</arg>
</arguments>
<msg timestamp="20180713 12:40:47.192" level="INFO">virtual-mac</msg>
<status status="PASS" endtime="20180713 12:40:47.192" starttime="20180713 12:40:47.176"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>signaling-mtu 1000</arg>
</arguments>
<msg timestamp="20180713 12:40:47.192" level="INFO">admin-state                             enabled</msg>
<status status="PASS" endtime="20180713 12:40:47.192" starttime="20180713 12:40:47.192"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:40:47.192" level="INFO">auto-negotiation                        enabled</msg>
<status status="PASS" endtime="20180713 12:40:47.192" starttime="20180713 12:40:47.192"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180713 12:40:57.194" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180713 12:40:57.194" starttime="20180713 12:40:47.192"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:40:57.194" level="INFO">duplex-mode                             FULL</msg>
<status status="PASS" endtime="20180713 12:40:57.194" starttime="20180713 12:40:57.194"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>system-config</arg>
</arguments>
<msg timestamp="20180713 12:40:57.194" level="INFO">speed                                   100</msg>
<status status="PASS" endtime="20180713 12:40:57.194" starttime="20180713 12:40:57.194"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>hostname sbc</arg>
</arguments>
<msg timestamp="20180713 12:40:57.210" level="INFO">wancom-health-score                     50</msg>
<status status="PASS" endtime="20180713 12:40:57.210" starttime="20180713 12:40:57.194"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description Oracle-SBC</arg>
</arguments>
<msg timestamp="20180713 12:40:57.210" level="INFO">overload-protection                     disabled</msg>
<status status="PASS" endtime="20180713 12:40:57.210" starttime="20180713 12:40:57.210"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>default-gateway ${DEFAULT-GATEWAY}</arg>
</arguments>
<msg timestamp="20180713 12:40:57.210" level="INFO">last-modified-by                        admin@172.18.0.60</msg>
<status status="PASS" endtime="20180713 12:40:57.210" starttime="20180713 12:40:57.210"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:40:57.210" level="INFO">last-modified-date                      2018-07-13 07:02:00</msg>
<status status="PASS" endtime="20180713 12:40:57.210" starttime="20180713 12:40:57.210"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:41:02.233" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:41:02.233" starttime="20180713 12:40:57.226"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<status status="PASS" endtime="20180713 12:41:02.233" starttime="20180713 12:41:02.233"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:02.233" level="INFO">(phy-interface)# exit</msg>
<status status="PASS" endtime="20180713 12:41:02.233" starttime="20180713 12:41:02.233"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>session-router</arg>
</arguments>
<msg timestamp="20180713 12:41:02.233" level="INFO">(system)# network-interface</msg>
<status status="PASS" endtime="20180713 12:41:02.233" starttime="20180713 12:41:02.233"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-config</arg>
</arguments>
<msg timestamp="20180713 12:41:02.233" level="INFO">(network-interface)# name ext</msg>
<status status="PASS" endtime="20180713 12:41:02.249" starttime="20180713 12:41:02.233"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20180713 12:41:02.249" level="INFO">(network-interface)# sub-port-id 0</msg>
<status status="PASS" endtime="20180713 12:41:02.249" starttime="20180713 12:41:02.249"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>home-realm-id csm</arg>
</arguments>
<msg timestamp="20180713 12:41:02.249" level="INFO">(network-interface)# description toEPC</msg>
<status status="PASS" endtime="20180713 12:41:02.249" starttime="20180713 12:41:02.249"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>registrar-domain *</arg>
</arguments>
<msg timestamp="20180713 12:41:02.249" level="INFO">(network-interface)# ip-address 10.80.1.244</msg>
<status status="PASS" endtime="20180713 12:41:02.249" starttime="20180713 12:41:02.249"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>registrar-host *</arg>
</arguments>
<msg timestamp="20180713 12:41:02.249" level="INFO">(network-interface)# netmask 255.255.255.0</msg>
<status status="PASS" endtime="20180713 12:41:02.249" starttime="20180713 12:41:02.249"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>registrar-port 5060</arg>
</arguments>
<msg timestamp="20180713 12:41:02.264" level="INFO">(network-interface)# gateway 10.80.1.1</msg>
<status status="PASS" endtime="20180713 12:41:02.264" starttime="20180713 12:41:02.249"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>options +force-unregistration</arg>
</arguments>
<msg timestamp="20180713 12:41:02.264" level="INFO">(network-interface)# dns-ip-primary 10.80.1.134</msg>
<status status="PASS" endtime="20180713 12:41:02.264" starttime="20180713 12:41:02.264"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>options +max-udp-length=0</arg>
</arguments>
<msg timestamp="20180713 12:41:02.264" level="INFO">(network-interface)# dns-domain example.demo</msg>
<status status="PASS" endtime="20180713 12:41:02.264" starttime="20180713 12:41:02.264"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:41:02.264" level="INFO">(network-interface)# add-hip-ip 10.80.1.244</msg>
<status status="PASS" endtime="20180713 12:41:02.264" starttime="20180713 12:41:02.264"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:02.264" level="INFO">(network-interface)# add-icmp-ip 10.80.1.244</msg>
<status status="PASS" endtime="20180713 12:41:02.264" starttime="20180713 12:41:02.264"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-interface</arg>
</arguments>
<msg timestamp="20180713 12:41:02.264" level="INFO">(network-interface)# done</msg>
<status status="PASS" endtime="20180713 12:41:02.264" starttime="20180713 12:41:02.264"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20180713 12:41:02.264" level="INFO">network-interface</msg>
<status status="PASS" endtime="20180713 12:41:02.264" starttime="20180713 12:41:02.264"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id epc</arg>
</arguments>
<msg timestamp="20180713 12:41:02.264" level="INFO">name                                    ext</msg>
<status status="PASS" endtime="20180713 12:41:02.264" starttime="20180713 12:41:02.264"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description EPC-&gt;SBC</arg>
</arguments>
<msg timestamp="20180713 12:41:02.264" level="INFO">sub-port-id                             0</msg>
<status status="PASS" endtime="20180713 12:41:02.264" starttime="20180713 12:41:02.264"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-ims-feature enabled</arg>
</arguments>
<msg timestamp="20180713 12:41:02.264" level="INFO">description                             toEPC</msg>
<status status="PASS" endtime="20180713 12:41:02.280" starttime="20180713 12:41:02.264"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>proxy-mode proxy</arg>
</arguments>
<msg timestamp="20180713 12:41:02.280" level="INFO">hostname</msg>
<status status="PASS" endtime="20180713 12:41:02.280" starttime="20180713 12:41:02.280"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>registration-caching enabled</arg>
</arguments>
<msg timestamp="20180713 12:41:02.280" level="INFO">ip-address                              10.80.1.244</msg>
<status status="PASS" endtime="20180713 12:41:02.280" starttime="20180713 12:41:02.280"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>route-to-registrar enabled</arg>
</arguments>
<msg timestamp="20180713 12:41:02.280" level="INFO">pri-utility-addr</msg>
<status status="PASS" endtime="20180713 12:41:02.280" starttime="20180713 12:41:02.280"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-id example.demo</arg>
</arguments>
<msg timestamp="20180713 12:41:02.280" level="INFO">sec-utility-addr</msg>
<status status="PASS" endtime="20180713 12:41:02.280" starttime="20180713 12:41:02.280"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-ports</arg>
</arguments>
<msg timestamp="20180713 12:41:02.280" level="INFO">netmask                                 255.255.255.0</msg>
<status status="PASS" endtime="20180713 12:41:02.280" starttime="20180713 12:41:02.280"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>address ${IP2}</arg>
</arguments>
<msg timestamp="20180713 12:41:02.280" level="INFO">gateway                                 10.80.1.1</msg>
<status status="PASS" endtime="20180713 12:41:02.280" starttime="20180713 12:41:02.280"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:41:02.280" level="INFO">sec-gateway</msg>
<status status="PASS" endtime="20180713 12:41:02.280" starttime="20180713 12:41:02.280"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:02.296" level="INFO">gw-heartbeat</msg>
<status status="PASS" endtime="20180713 12:41:02.296" starttime="20180713 12:41:02.280"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:41:02.296" level="INFO">state                                   disabled</msg>
<status status="PASS" endtime="20180713 12:41:02.296" starttime="20180713 12:41:02.296"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20180713 12:41:02.296" level="INFO">heartbeat                               0</msg>
<status status="PASS" endtime="20180713 12:41:02.296" starttime="20180713 12:41:02.296"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id csm</arg>
</arguments>
<msg timestamp="20180713 12:41:02.296" level="INFO">retry-count                             0</msg>
<status status="PASS" endtime="20180713 12:41:02.296" starttime="20180713 12:41:02.296"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description SBC-&gt;CSM</arg>
</arguments>
<msg timestamp="20180713 12:41:02.296" level="INFO">retry-timeout                           1</msg>
<status status="PASS" endtime="20180713 12:41:02.296" starttime="20180713 12:41:02.296"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-ims-feature enabled</arg>
</arguments>
<msg timestamp="20180713 12:41:02.296" level="INFO">health-score                            0</msg>
<status status="PASS" endtime="20180713 12:41:02.296" starttime="20180713 12:41:02.296"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>write</arg>
<arg>proxy-mode</arg>
</arguments>
<status status="PASS" endtime="20180713 12:41:02.296" starttime="20180713 12:41:02.296"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>write</arg>
<arg>registration-caching disabled</arg>
</arguments>
<status status="PASS" endtime="20180713 12:41:02.296" starttime="20180713 12:41:02.296"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>write</arg>
<arg>route-to-registrar disabled</arg>
</arguments>
<status status="PASS" endtime="20180713 12:41:02.296" starttime="20180713 12:41:02.296"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-ports</arg>
</arguments>
<msg timestamp="20180713 12:41:02.296" level="INFO">dns-ip-primary                          10.80.1.134</msg>
<status status="PASS" endtime="20180713 12:41:02.296" starttime="20180713 12:41:02.296"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>address ${IP1}</arg>
</arguments>
<msg timestamp="20180713 12:41:02.296" level="INFO">dns-ip-backup1</msg>
<status status="PASS" endtime="20180713 12:41:02.296" starttime="20180713 12:41:02.296"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:41:02.296" level="INFO">dns-ip-backup2</msg>
<status status="PASS" endtime="20180713 12:41:02.296" starttime="20180713 12:41:02.296"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:41:07.303" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:41:07.303" starttime="20180713 12:41:02.296"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:07.303" level="INFO">dns-domain                              example.demo</msg>
<status status="PASS" endtime="20180713 12:41:07.303" starttime="20180713 12:41:07.303"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20180713 12:41:07.303" level="INFO">dns-timeout                             11
        dns-max-ttl                             86400
        signaling-mtu                           0
        hip-ip-list                             10.80.1.244
        ftp-address                             
        icmp-address                            10.80.1.244
        snmp-address                            
        telnet-address                          
        ssh-address                             
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:02

(network-interface)# name in
(network-interface)# description toCSM
(network-interface)# ip-address 10.80.1.243
(network-interface)# netmask 255.255.255.0
(network-interface)# gateway 10.80.1.1
(network-interface)# dns-ip-primary 10.80.1.134
(network-interface)# dns-domain example.demo
(network-interface)# add-hip-ip 10.80.1.243
(network-interface)# add-icmp-ip 10.80.1.243
(network-interface)# signaling-mtu 1000
(network-interface)# done
network-interface
        name                                    in
        sub-port-id                             0
        description                             toCSM
        hostname                                
        ip-address                              10.80.1.243
        pri-utility-addr                        
        sec-utility-addr                        
        netmask                                 255.255.255.0
        gateway                                 10.80.1.1
        sec-gateway                             
        gw-heartbeat
                state                                   disabled
                heartbeat                               0
                retry-count                             0
                retry-timeout                           1
                health-score                            0
        dns-ip-primary                          10.80.1.134
        dns-ip-backup1                          
        dns-ip-backup2                          
        dns-domain                              example.demo
        dns-timeout                             11
        dns-max-ttl                             86400
        signaling-mtu                           1000
        hip-ip-list                             10.80.1.243
        ftp-address                             
        icmp-address                            10.80.1.243
        snmp-address                            
        telnet-address                          
        ssh-address                             
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:07

(network-interface)# exit
(system)# system-config
(system-config)# hostname sbc
(system-config)# description Oracle-SBC
(system-config)# default-gateway 172.18.0.254
(system-config)# done
system-config
        hostname                                sbc
        description                             Oracle-SBC
        location                                
        mib-system-contact                      
        mib-system-name                         
        mib-system-location                     
        acp-tls-profile                         
        snmp-enabled                            enabled
        enable-snmp-auth-traps                  disabled
        enable-snmp-syslog-notify               disabled
        enable-snmp-monitor-traps               disabled
        enable-env-monitor-traps                disabled
        enable-mblk_tracking                    disabled
        snmp-syslog-his-table-length            1
        snmp-syslog-level                       WARNING
        system-log-level                        WARNING
        process-log-level                       NOTICE
        process-log-ip-address                  0.0.0.0
        process-log-port                        0
        collect
                sample-interval                         5
                push-interval                           15
                boot-state                              disabled
                start-time                              now
                end-time                                never
                red-collect-state                       disabled
                red-max-trans                           1000
                red-sync-start-time                     5000
                red-sync-comp-time                      1000
                push-success-trap-state                 disabled
        comm-monitor
                state                                   disabled
                sbc-grp-id                              0
                tls-profile                             
                qos-enable                              enabled
        call-trace                              disabled
        internal-trace                          disabled
        log-filter                              all
        default-gateway                         172.18.0.254
        restart                                 enabled
        exceptions                              
        telnet                                  disabled
        telnet-timeout                          0
        console-timeout                         0
        remote-control                          enabled
        cli-audit-trail                         enabled
        link-redundancy-state                   disabled
        source-routing                          disabled
        cli-more                                disabled
        terminal-height                         24
        debug-timeout                           0
        trap-event-lifetime                     0
        ids-syslog-facility                     -1
        options                                 
        default-v6-gateway                      ::
        ipv4-signaling-mtu                      1500
        cleanup-time-of-day                     00:00
        snmp-engine-id-suffix                   
        snmp-agent-mode                         v1v2
        forwarding-cores                        1
        dos-cores                               0
        transcoding-cores                       0
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:17

(system-config)# exit
(system)# exit
(configure)# session-router
(session-router)# sip-config
(sip-config)# state enabled
(sip-config)# home-realm-id csm
(sip-config)# registrar-domain *
(sip-config)# registrar-host *
(sip-config)# registrar-port 5060
(sip-config)# options +force-unregistration
(sip-config)# options +max-udp-length=0
(sip-config)# done
sip-config
        state                                   enabled
        operation-mode                          dialog
        dialog-transparency                     enabled
        home-realm-id                           csm
        egress-realm-id                         
        auto-realm-id                           
        nat-mode                                None
        registrar-domain                        *
        registrar-host                          *
        registrar-port                          5060
        register-service-route                  always
        init-timer                              500
        max-timer                               4000
        trans-expire                            32
        initial-inv-trans-expire                0
        invite-expire                           180
        session-max-life-limit                  0
        inactive-dynamic-conn                   32
        enforcement-profile                     
        pac-method                              
        pac-interval                            10
        pac-strategy                            PropDist
        pac-load-weight                         1
        pac-session-weight                      1
        pac-route-weight                        1
        pac-callid-lifetime                     600
        pac-user-lifetime                       3600
        red-sip-port                            1988
        red-max-trans                           10000
        red-sync-start-time                     5000
        red-sync-comp-time                      1000
        options                                 force-unregistration
                                                max-udp-length=0
        add-reason-header                       disabled
        sip-message-len                         4096
        enum-sag-match                          disabled
        extra-method-stats                      disabled
        extra-enum-stats                        disabled
        rph-feature                             disabled
        nsep-user-sessions-rate                 0
        nsep-sa-sessions-rate                   0
        registration-cache-limit                0
        register-use-to-for-lp                  disabled
        refer-src-routing                       disabled
        add-ucid-header                         disabled
        proxy-sub-events                        
        allow-pani-for-trusted-only             disabled
        atcf-stn-sr                             
        atcf-psi-dn                             
        atcf-route-to-sccas                     disabled
        eatf-stn-sr                             
        pass-gruu-contact                       disabled
        sag-lookup-on-redirect                  disabled
        set-disconnect-time-on-bye              disabled
        msrp-delayed-bye-timer                  15
        transcoding-realm                       
        transcoding-agents                      
        create-dynamic-sa                       disabled
        node-functionality                      P-CSCF
        match-sip-instance                      disabled
        sa-routes-stats                         disabled
        sa-routes-traps                         disabled
        rx-sip-reason-mapping                   disabled
        add-ue-location-in-pani                 disabled
        hold-emergency-calls-for-loc-info       0
        retry-after-upon-offline                0
        reg-reject-response-upon-offline        503
        hold-invite-calls-for-loc-info          0
        cache-loc-info-expire                   32
        msg-hold-for-loc-info                   0
        npli-upon-register                      disabled
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:22

(sip-config)# exit
(session-router)# sip-interface
(sip-interface)# state enabled
(sip-interface)# realm-id epc
(sip-interface)# description EPC-&gt;SBC
(sip-interface)# sip-ims-feature enabled
(sip-interface)# proxy-mode proxy
(sip-interface)# registration-caching enabled
(sip-interface)# route-to-registrar enabled
(sip-interface)# network-id example.demo
(sip-interface)# sip-ports
(sip-port)# address 10.80.1.244
(sip-port)# done
sip-port
        address                                 10.80.1.244
        port                                    5060
        transport-protocol                      UDP
        tls-profile                             
        allow-anonymous                         all
        multi-home-addrs                        
        ims-aka-profile                         

(sip-port)# exit
(sip-interface)# done
sip-interface
        state                                   enabled
        realm-id                                epc
        description                             EPC-&gt;SBC
        sip-port
                address                                 10.80.1.244
                port                                    5060
                transport-protocol                      UDP
                tls-profile                             
                allow-anonymous                         all
                multi-home-addrs                        
                ims-aka-profile                         
        carriers                                
        trans-expire                            0
        initial-inv-trans-expire                0
        invite-expire                           0
        session-max-life-limit                  0
        max-redirect-contacts                   0
        proxy-mode                              Proxy
        redirect-action                         
        contact-mode                            none
        nat-traversal                           none
        nat-interval                            30
        tcp-nat-interval                        90
        registration-caching                    enabled
        min-reg-expire                          300
        registration-interval                   3600
        route-to-registrar                      enabled
        secured-network                         disabled
        teluri-scheme                           disabled
        uri-fqdn-domain                         
        options                                 
        spl-options                             
        trust-mode                              all
        max-nat-interval                        3600
        nat-int-increment                       10
        nat-test-increment                      30
        sip-dynamic-hnt                         disabled
        stop-recurse                            401,407
        port-map-start                          0
        port-map-end                            0
        in-manipulationid                       
        out-manipulationid                      
        sip-ims-feature                         enabled
        sip-atcf-feature                        disabled
        subscribe-reg-event                     disabled
        operator-identifier                     
        anonymous-priority                      none
        max-incoming-conns                      0
        per-src-ip-max-incoming-conns           0
        inactive-conn-timeout                   0
        untrusted-conn-timeout                  0
        network-id                              example.demo
        ext-policy-server                       
        ldap-policy-server                      
        default-location-string                 
        term-tgrp-mode                          none
        charging-vector-mode                    pass
        charging-function-address-mode          pass
        ccf-address                             
        ecf-address                             
        implicit-service-route                  disabled
        rfc2833-payload                         101
        rfc2833-mode                            transparent
        constraint-name                         
        response-map                            
        local-response-map                      
        sec-agree-feature                       disabled
        sec-agree-pref                          ipsec3gpp
        enforcement-profile                     
        route-unauthorized-calls                
        tcp-keepalive                           none
        add-sdp-invite                          disabled
        p-early-media-header                    disabled
        p-early-media-direction                 
        add-sdp-profiles                        
        manipulation-string                     
        manipulation-pattern                    
        sip-profile                             
        sip-isup-profile                        
        tcp-conn-dereg                          0
        tunnel-name                             
        register-keep-alive                     none
        kpml-interworking                       disabled
        msrp-delay-egress-bye                   disabled
        send-380-response                       
        pcscf-restoration                       
        session-timer-profile                   
        session-recording-server                
        session-recording-required              disabled
        service-tag                             
        reg-cache-route                         disabled
        diversion-info-mapping-mode             none
        atcf-icsi-match                         
        sip-recursion-policy                    
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:22

(sip-interface)# state enabled
(sip-interface)# realm-id csm
(sip-interface)# description SBC-&gt;CSM
(sip-interface)# sip-ims-feature enabled
(sip-interface)# sip-ports
(sip-port)# address 10.80.1.243
(sip-port)# done
sip-port
        address                                 10.80.1.243
        port                                    5060
        transport-protocol                      UDP
        tls-profile                             
        allow-anonymous                         all
        multi-home-addrs                        
        ims-aka-profile                         

(sip-port)# exit
(sip-interface)#</msg>
<status status="PASS" endtime="20180713 12:41:07.303" starttime="20180713 12:41:07.303"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180713 12:41:12.311" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180713 12:41:12.311" starttime="20180713 12:41:07.303"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:12.311" level="INFO">exit</msg>
<status status="PASS" endtime="20180713 12:41:12.311" starttime="20180713 12:41:12.311"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>Y</arg>
</arguments>
<msg timestamp="20180713 12:41:12.326" level="INFO">Save Changes [y/n]?: Y</msg>
<status status="PASS" endtime="20180713 12:41:12.326" starttime="20180713 12:41:12.311"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>session-agent</arg>
</arguments>
<msg timestamp="20180713 12:41:12.326" level="INFO">sip-interface</msg>
<status status="PASS" endtime="20180713 12:41:12.326" starttime="20180713 12:41:12.326"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>hostname ${CSM IP}</arg>
</arguments>
<msg timestamp="20180713 12:41:12.342" level="INFO">state                                   enabled</msg>
<status status="PASS" endtime="20180713 12:41:12.342" starttime="20180713 12:41:12.326"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${CSM IP}</arg>
</arguments>
<msg timestamp="20180713 12:41:12.342" level="INFO">realm-id                                csm</msg>
<status status="PASS" endtime="20180713 12:41:12.342" starttime="20180713 12:41:12.342"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>port 5060</arg>
</arguments>
<msg timestamp="20180713 12:41:12.342" level="INFO">description                             SBC-&gt;CSM</msg>
<status status="PASS" endtime="20180713 12:41:12.342" starttime="20180713 12:41:12.342"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20180713 12:41:12.342" level="INFO">sip-port</msg>
<status status="PASS" endtime="20180713 12:41:12.342" starttime="20180713 12:41:12.342"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id csm</arg>
</arguments>
<msg timestamp="20180713 12:41:12.342" level="INFO">address                                 10.80.1.243</msg>
<status status="PASS" endtime="20180713 12:41:12.342" starttime="20180713 12:41:12.342"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>egress-realm-id</arg>
</arguments>
<msg timestamp="20180713 12:41:12.342" level="INFO">port                                    5060</msg>
<status status="PASS" endtime="20180713 12:41:12.342" starttime="20180713 12:41:12.342"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>trust-me enabled</arg>
</arguments>
<msg timestamp="20180713 12:41:12.358" level="INFO">transport-protocol                      UDP</msg>
<status status="PASS" endtime="20180713 12:41:12.358" starttime="20180713 12:41:12.342"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:41:12.358" level="INFO">tls-profile</msg>
<status status="PASS" endtime="20180713 12:41:12.358" starttime="20180713 12:41:12.358"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:12.358" level="INFO">allow-anonymous                         all</msg>
<status status="PASS" endtime="20180713 12:41:12.358" starttime="20180713 12:41:12.358"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>local-policy</arg>
</arguments>
<msg timestamp="20180713 12:41:12.358" level="INFO">multi-home-addrs</msg>
<status status="PASS" endtime="20180713 12:41:12.358" starttime="20180713 12:41:12.358"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>from-address *</arg>
</arguments>
<msg timestamp="20180713 12:41:12.358" level="INFO">ims-aka-profile</msg>
<status status="PASS" endtime="20180713 12:41:12.358" starttime="20180713 12:41:12.358"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>to-address *</arg>
</arguments>
<msg timestamp="20180713 12:41:12.358" level="INFO">carriers</msg>
<status status="PASS" endtime="20180713 12:41:12.358" starttime="20180713 12:41:12.358"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source-realm epc</arg>
</arguments>
<msg timestamp="20180713 12:41:12.358" level="INFO">trans-expire                            0</msg>
<status status="PASS" endtime="20180713 12:41:12.358" starttime="20180713 12:41:12.358"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description EPC-&gt;SBC-&gt;CSM</arg>
</arguments>
<msg timestamp="20180713 12:41:12.358" level="INFO">initial-inv-trans-expire                0</msg>
<status status="PASS" endtime="20180713 12:41:12.358" starttime="20180713 12:41:12.358"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>policy-attributes</arg>
</arguments>
<msg timestamp="20180713 12:41:12.373" level="INFO">invite-expire                           0</msg>
<status status="PASS" endtime="20180713 12:41:12.373" starttime="20180713 12:41:12.373"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>next-hop ${CSM IP}</arg>
</arguments>
<msg timestamp="20180713 12:41:12.373" level="INFO">session-max-life-limit                  0</msg>
<status status="PASS" endtime="20180713 12:41:12.373" starttime="20180713 12:41:12.373"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm csm</arg>
</arguments>
<msg timestamp="20180713 12:41:12.373" level="INFO">max-redirect-contacts                   0</msg>
<status status="PASS" endtime="20180713 12:41:12.373" starttime="20180713 12:41:12.373"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20180713 12:41:12.373" level="INFO">proxy-mode</msg>
<status status="PASS" endtime="20180713 12:41:12.373" starttime="20180713 12:41:12.373"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:41:12.373" level="INFO">redirect-action</msg>
<status status="PASS" endtime="20180713 12:41:12.373" starttime="20180713 12:41:12.373"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:12.373" level="INFO">contact-mode                            none</msg>
<status status="PASS" endtime="20180713 12:41:12.373" starttime="20180713 12:41:12.373"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:41:16.385" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:41:16.385" starttime="20180713 12:41:12.373"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:16.385" level="INFO">nat-traversal                           none</msg>
<status status="PASS" endtime="20180713 12:41:16.385" starttime="20180713 12:41:16.385"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:41:20.399" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:41:20.399" starttime="20180713 12:41:16.385"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>y</arg>
</arguments>
<msg timestamp="20180713 12:41:20.399" level="INFO">nat-interval                            30</msg>
<status status="PASS" endtime="20180713 12:41:20.399" starttime="20180713 12:41:20.399"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180713 12:41:23.411" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180713 12:41:23.411" starttime="20180713 12:41:20.399"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:23.411" level="INFO">tcp-nat-interval                        90</msg>
<status status="PASS" endtime="20180713 12:41:23.411" starttime="20180713 12:41:23.411"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>media-manager</arg>
</arguments>
<msg timestamp="20180713 12:41:23.411" level="INFO">registration-caching                    disabled</msg>
<status status="PASS" endtime="20180713 12:41:23.411" starttime="20180713 12:41:23.411"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-config</arg>
</arguments>
<msg timestamp="20180713 12:41:23.427" level="INFO">min-reg-expire                          300</msg>
<status status="PASS" endtime="20180713 12:41:23.427" starttime="20180713 12:41:23.411"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>identifier epc</arg>
</arguments>
<msg timestamp="20180713 12:41:23.427" level="INFO">registration-interval                   3600</msg>
<status status="PASS" endtime="20180713 12:41:23.427" starttime="20180713 12:41:23.427"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>addr-prefix 0.0.0.0</arg>
</arguments>
<msg timestamp="20180713 12:41:23.427" level="INFO">route-to-registrar                      disabled</msg>
<status status="PASS" endtime="20180713 12:41:23.427" starttime="20180713 12:41:23.427"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interfaces ext:0</arg>
</arguments>
<msg timestamp="20180713 12:41:23.427" level="INFO">secured-network                         disabled</msg>
<status status="PASS" endtime="20180713 12:41:23.427" starttime="20180713 12:41:23.427"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:41:23.443" level="INFO">teluri-scheme                           disabled</msg>
<status status="PASS" endtime="20180713 12:41:23.443" starttime="20180713 12:41:23.427"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>identifier csm</arg>
</arguments>
<msg timestamp="20180713 12:41:23.443" level="INFO">uri-fqdn-domain</msg>
<status status="PASS" endtime="20180713 12:41:23.443" starttime="20180713 12:41:23.443"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>addr-prefix 0.0.0.0</arg>
</arguments>
<msg timestamp="20180713 12:41:23.443" level="INFO">options</msg>
<status status="PASS" endtime="20180713 12:41:23.443" starttime="20180713 12:41:23.443"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interfaces in:0</arg>
</arguments>
<msg timestamp="20180713 12:41:23.443" level="INFO">spl-options</msg>
<status status="PASS" endtime="20180713 12:41:23.443" starttime="20180713 12:41:23.443"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:41:23.443" level="INFO">trust-mode                              all</msg>
<status status="PASS" endtime="20180713 12:41:23.443" starttime="20180713 12:41:23.443"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:23.443" level="INFO">max-nat-interval                        3600</msg>
<status status="PASS" endtime="20180713 12:41:23.443" starttime="20180713 12:41:23.443"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>steering-pool</arg>
</arguments>
<msg timestamp="20180713 12:41:23.443" level="INFO">nat-int-increment                       10</msg>
<status status="PASS" endtime="20180713 12:41:23.443" starttime="20180713 12:41:23.443"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${IP2}</arg>
</arguments>
<msg timestamp="20180713 12:41:23.443" level="INFO">nat-test-increment                      30</msg>
<status status="PASS" endtime="20180713 12:41:23.443" starttime="20180713 12:41:23.443"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>start-port 10000</arg>
</arguments>
<msg timestamp="20180713 12:41:23.458" level="INFO">sip-dynamic-hnt                         disabled</msg>
<status status="PASS" endtime="20180713 12:41:23.458" starttime="20180713 12:41:23.443"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>end-port 29999</arg>
</arguments>
<msg timestamp="20180713 12:41:23.458" level="INFO">stop-recurse                            401,407</msg>
<status status="PASS" endtime="20180713 12:41:23.458" starttime="20180713 12:41:23.458"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id epc</arg>
</arguments>
<msg timestamp="20180713 12:41:23.458" level="INFO">port-map-start                          0</msg>
<status status="PASS" endtime="20180713 12:41:23.458" starttime="20180713 12:41:23.458"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interface ext:0</arg>
</arguments>
<msg timestamp="20180713 12:41:23.458" level="INFO">port-map-end                            0</msg>
<status status="PASS" endtime="20180713 12:41:23.458" starttime="20180713 12:41:23.458"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:41:23.458" level="INFO">in-manipulationid</msg>
<status status="PASS" endtime="20180713 12:41:23.458" starttime="20180713 12:41:23.458"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${IP1}</arg>
</arguments>
<msg timestamp="20180713 12:41:23.458" level="INFO">out-manipulationid</msg>
<status status="PASS" endtime="20180713 12:41:23.458" starttime="20180713 12:41:23.458"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>start-port 30000</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">sip-ims-feature                         enabled</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.458"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>end-port 49999</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">sip-atcf-feature                        disabled</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id csm</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">subscribe-reg-event                     disabled</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interface in:0</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">operator-identifier</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">anonymous-priority                      none</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">max-incoming-conns                      0</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20180713 12:41:23.474" level="INFO">per-src-ip-max-incoming-conns           0
        inactive-conn-timeout                   0
        untrusted-conn-timeout                  0
        network-id                              
        ext-policy-server                       
        ldap-policy-server                      
        default-location-string                 
        term-tgrp-mode                          none
        charging-vector-mode                    pass
        charging-function-address-mode          pass
        ccf-address                             
        ecf-address                             
        implicit-service-route                  disabled
        rfc2833-payload                         101
        rfc2833-mode                            transparent
        constraint-name                         
        response-map                            
        local-response-map                      
        sec-agree-feature                       disabled
        sec-agree-pref                          ipsec3gpp
        enforcement-profile                     
        route-unauthorized-calls                
        tcp-keepalive                           none
        add-sdp-invite                          disabled
        p-early-media-header                    disabled
        p-early-media-direction                 
        add-sdp-profiles                        
        manipulation-string                     
        manipulation-pattern                    
        sip-profile                             
        sip-isup-profile                        
        tcp-conn-dereg                          0
        tunnel-name                             
        register-keep-alive                     none
        kpml-interworking                       disabled
        msrp-delay-egress-bye                   disabled
        send-380-response                       
        pcscf-restoration                       
        session-timer-profile                   
        session-recording-server                
        session-recording-required              disabled
        service-tag                             
        reg-cache-route                         disabled
        diversion-info-mapping-mode             none
        atcf-icsi-match                         
        sip-recursion-policy                    
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:32

(session-router)# session-agent
(session-agent)# hostname 10.80.1.210
(session-agent)# ip-address 10.80.1.210
(session-agent)# port 5060
(session-agent)# state enabled
(session-agent)# realm-id csm
(session-agent)# egress-realm-id
% Invalid number of arguments
(session-agent)# trust-me enabled
(session-agent)# done
session-agent
        hostname                                10.80.1.210
        ip-address                              10.80.1.210
        port                                    5060
        state                                   enabled
        app-protocol                            SIP
        app-type                                
        transport-method                        UDP
        realm-id                                csm
        egress-realm-id                         
        description                             
        carriers                                
        allow-next-hop-lp                       enabled
        constraints                             disabled
        max-sessions                            0
        max-inbound-sessions                    0
        max-outbound-sessions                   0
        max-burst-rate                          0
        max-inbound-burst-rate                  0
        max-outbound-burst-rate                 0
        max-sustain-rate                        0
        max-inbound-sustain-rate                0
        max-outbound-sustain-rate               0
        min-seizures                            5
        min-asr                                 0
        session-max-life-limit                  0
        time-to-resume                          0
        ttr-no-response                         0
        in-service-period                       0
        burst-rate-window                       0
        sustain-rate-window                     0
        req-uri-carrier-mode                    None
        proxy-mode                              
        redirect-action                         
        loose-routing                           enabled
        send-media-session                      enabled
        response-map                            
        ping-method                             
        ping-interval                           0
        ping-send-mode                          keep-alive
        ping-all-addresses                      disabled
        ping-in-service-response-codes          
        out-service-response-codes              
        load-balance-dns-query                  hunt
        options                                 
        spl-options                             
        media-profiles                          
        in-translationid                        
        out-translationid                       
        trust-me                                enabled
        request-uri-headers                     
        stop-recurse                            
        local-response-map                      
        ping-to-user-part                       
        ping-from-user-part                     
        in-manipulationid                       
        out-manipulationid                      
        manipulation-string                     
        manipulation-pattern                    
        p-asserted-id                           
        trunk-group                             
        max-register-sustain-rate               0
        early-media-allow                       
        invalidate-registrations                disabled
        rfc2833-mode                            none
        rfc2833-payload                         0
        codec-policy                            
        enforcement-profile                     
        refer-call-transfer                     disabled
        refer-notify-provisional                none
        reuse-connections                       NONE
        tcp-keepalive                           none
        tcp-reconn-interval                     0
        max-register-burst-rate                 0
        register-burst-window                   0
        sip-profile                             
        sip-isup-profile                        
        kpml-interworking                       inherit
        precedence                              0
        monitoring-filters                      
        session-recording-server                
        session-recording-required              disabled
        hold-refer-reinvite                     disabled
        send-tcp-fin                            disabled
        sip-recursion-policy                    
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:32

(session-agent)# exit
(session-router)# local-policy
(local-policy)# from-address *
(local-policy)# to-address *
(local-policy)# source-realm epc
(local-policy)# description EPC-&gt;SBC-&gt;CSM
(local-policy)# policy-attributes
(local-policy-attributes)# next-hop 10.80.1.210
(local-policy-attributes)# realm csm
(local-policy-attributes)# state enabled
(local-policy-attributes)# done
policy-attribute
        next-hop                                10.80.1.210
        realm                                   csm
        action                                  none
        terminate-recursion                     disabled
        carrier                                 
        start-time                              0000
        end-time                                2400
        days-of-week                            U-S
        cost                                    0
        state                                   enabled
        app-protocol                            
        methods                                 
        media-profiles                          
        lookup                                  single
        next-key                                
        eloc-str-lkup                           disabled
        eloc-str-match                          

(local-policy-attributes)# exit
(local-policy)# exit
Save Changes [y/n]?: y
local-policy
        from-address                            *
        to-address                              *
        source-realm                            epc
        description                             EPC-&gt;SBC-&gt;CSM
        activate-time                           
        deactivate-time                         
        state                                   enabled
        policy-priority                         none
        policy-attribute
                next-hop                                10.80.1.210
                realm                                   csm
                action                                  none
                terminate-recursion                     disabled
                carrier                                 
                start-time                              0000
                end-time                                2400
                days-of-week                            U-S
                cost                                    0
                state                                   enabled
                app-protocol                            
                methods                                 
                media-profiles                          
                lookup                                  single
                next-key                                
                eloc-str-lkup                           disabled
                eloc-str-match                          
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:40

(session-router)# exit
(configure)# media-manager
(media-manager)# realm-config
(realm-config)# identifier epc
(realm-config)# addr-prefix 0.0.0.0
(realm-config)# network-interfaces ext:0
(realm-config)# done
realm-config
        identifier                              epc
        description                             
        addr-prefix                             0.0.0.0
        network-interfaces                      ext:0
        mm-in-realm                             disabled
        mm-in-network                           enabled
        mm-same-ip                              enabled
        mm-in-system                            enabled
        bw-cac-non-mm                           disabled
        msm-release                             disabled
        qos-enable                              disabled
        max-bandwidth                           0
        fallback-bandwidth                      0
        max-priority-bandwidth                  0
        max-latency                             0
        max-jitter                              0
        max-packet-loss                         0
        observ-window-size                      0
        parent-realm                            
        dns-realm                               
        media-policy                            
        media-sec-policy                        
        srtp-msm-passthrough                    disabled
        class-profile                           
        in-translationid                        
        out-translationid</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>media-manager</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">in-manipulationid</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">out-manipulationid</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>latching enabled</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">average-rate-limit                      0</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>initial-guard-timer 300</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">access-control-trust-level              none</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>flow-time-limit 86400</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">invalid-signal-threshold                0</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>subsq-guard-timer 300</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">maximum-signal-threshold                0</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcp-flow-time-limit 86400</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">untrusted-signal-threshold              0</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcp-initial-guard-timer 300</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">nat-trust-threshold                     0</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180713 12:41:23.474" level="INFO">max-endpoints-per-nat                   0</msg>
<status status="PASS" endtime="20180713 12:41:23.474" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:23.489" level="INFO">nat-invalid-message-threshold           0</msg>
<status status="PASS" endtime="20180713 12:41:23.489" starttime="20180713 12:41:23.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:23.489" level="INFO">wait-time-for-invalid-register          0</msg>
<status status="PASS" endtime="20180713 12:41:23.489" starttime="20180713 12:41:23.489"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180713 12:41:23.489" level="INFO">deny-period                             30</msg>
<status status="PASS" endtime="20180713 12:41:23.489" starttime="20180713 12:41:23.489"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>save-config</arg>
</arguments>
<msg timestamp="20180713 12:41:23.489" level="INFO">session-max-life-limit                  0</msg>
<status status="PASS" endtime="20180713 12:41:23.489" starttime="20180713 12:41:23.489"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180713 12:41:25.502" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180713 12:41:25.502" starttime="20180713 12:41:23.489"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>reboot activate</arg>
</arguments>
<msg timestamp="20180713 12:41:25.502" level="INFO">cac-failure-threshold                   0</msg>
<status status="PASS" endtime="20180713 12:41:25.502" starttime="20180713 12:41:25.502"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180713 12:41:29.511" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180713 12:41:29.511" starttime="20180713 12:41:25.502"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>y</arg>
</arguments>
<msg timestamp="20180713 12:41:29.511" level="INFO">untrust-cac-failure-threshold           0</msg>
<status status="PASS" endtime="20180713 12:41:29.511" starttime="20180713 12:41:29.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**********Reboot Started**********</arg>
</arguments>
<msg timestamp="20180713 12:41:29.511" level="INFO">**********Reboot Started**********</msg>
<status status="PASS" endtime="20180713 12:41:29.511" starttime="20180713 12:41:29.511"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>50</arg>
</arguments>
<msg timestamp="20180713 12:42:19.516" level="INFO">Slept 50 seconds</msg>
<status status="PASS" endtime="20180713 12:42:19.516" starttime="20180713 12:41:29.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************** Configuration Completed ************</arg>
</arguments>
<msg timestamp="20180713 12:42:19.516" level="INFO">**************** Configuration Completed ************</msg>
<status status="PASS" endtime="20180713 12:42:19.516" starttime="20180713 12:42:19.516"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20180713 12:42:19.516" level="INFO">ext-policy-svr                          
        diam-e2-address-realm                   
        subscription-id-type                    END_USER_NONE
        symmetric-latching                      disabled
        pai-strip                               disabled
        trunk-context                           
        device-id                               
        early-media-allow                       
        enforcement-profile                     
        additional-prefixes                     
        restricted-latching                     none
        restriction-mask                        32
        user-cac-mode                           none
        user-cac-bandwidth                      0
        user-cac-sessions                       0
        icmp-detect-multiplier                  0
        icmp-advertisement-interval             0
        icmp-target-ip                          
        monthly-minutes                         0
        options                                 
        spl-options                             
        accounting-enable                       enabled
        net-management-control                  disabled
        delay-media-update                      disabled
        refer-call-transfer                     disabled
        hold-refer-reinvite                     disabled
        refer-notify-provisional                none
        dyn-refer-term                          disabled
        codec-policy                            
        codec-manip-in-realm                    disabled
        codec-manip-in-network                  enabled
        rtcp-policy                             
        constraint-name                         
        session-recording-server                
        session-recording-required              disabled
        manipulation-string                     
        manipulation-pattern                    
        stun-enable                             disabled
        stun-server-ip                          0.0.0.0
        stun-server-port                        3478
        stun-changed-ip                         0.0.0.0
        stun-changed-port                       3479
        sip-profile                             
        flow-time-limit                         -1
        initial-guard-timer                     -1
        subsq-guard-timer                       -1
        tcp-flow-time-limit                     -1
        tcp-initial-guard-timer                 -1
        tcp-subsq-guard-timer                   -1
        sip-isup-profile                        
        match-media-profiles                    
        qos-constraint                          
        block-rtcp                              disabled
        hide-egress-media-update                disabled
        tcp-media-profile                       
        monitoring-filters                      
        node-functionality                      
        default-location-string                 
        alt-family-realm                        
        pref-addr-type                          none
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:43

(realm-config)# identifier csm
(realm-config)# addr-prefix 0.0.0.0
(realm-config)# network-interfaces in:0
(realm-config)# done
realm-config
        identifier                              csm
        description                             
        addr-prefix                             0.0.0.0
        network-interfaces                      in:0
        mm-in-realm                             disabled
        mm-in-network                           enabled
        mm-same-ip                              enabled
        mm-in-system                            enabled
        bw-cac-non-mm                           disabled
        msm-release                             disabled
        qos-enable                              disabled
        max-bandwidth                           0
        fallback-bandwidth                      0
        max-priority-bandwidth                  0
        max-latency                             0
        max-jitter                              0
        max-packet-loss                         0
        observ-window-size                      0
        parent-realm                            
        dns-realm                               
        media-policy                            
        media-sec-policy                        
        srtp-msm-passthrough                    disabled
        class-profile                           
        in-translationid                        
        out-translationid                       
        in-manipulationid                       
        out-manipulationid                      
        average-rate-limit                      0
        access-control-trust-level              none
        invalid-signal-threshold                0
        maximum-signal-threshold                0
        untrusted-signal-threshold              0
        nat-trust-threshold                     0
        max-endpoints-per-nat                   0
        nat-invalid-message-threshold           0
        wait-time-for-invalid-register          0
        deny-period                             30
        session-max-life-limit                  0
        cac-failure-threshold                   0
        untrust-cac-failure-threshold           0
        ext-policy-svr                          
        diam-e2-address-realm                   
        subscription-id-type                    END_USER_NONE
        symmetric-latching                      disabled
        pai-strip                               disabled
        trunk-context                           
        device-id                               
        early-media-allow                       
        enforcement-profile                     
        additional-prefixes                     
        restricted-latching                     none
        restriction-mask                        32
        user-cac-mode                           none
        user-cac-bandwidth                      0
        user-cac-sessions                       0
        icmp-detect-multiplier                  0
        icmp-advertisement-interval             0
        icmp-target-ip                          
        monthly-minutes                         0
        options                                 
        spl-options                             
        accounting-enable                       enabled
        net-management-control                  disabled
        delay-media-update                      disabled
        refer-call-transfer                     disabled
        hold-refer-reinvite                     disabled
        refer-notify-provisional                none
        dyn-refer-term                          disabled
        codec-policy                            
        codec-manip-in-realm                    disabled
        codec-manip-in-network                  enabled
        rtcp-policy                             
        constraint-name                         
        session-recording-server                
        session-recording-required              disabled
        manipulation-string                     
        manipulation-pattern                    
        stun-enable                             disabled
        stun-server-ip                          0.0.0.0
        stun-server-port                        3478
        stun-changed-ip                         0.0.0.0
        stun-changed-port                       3479
        sip-profile                             
        flow-time-limit                         -1
        initial-guard-timer                     -1
        subsq-guard-timer                       -1
        tcp-flow-time-limit                     -1
        tcp-initial-guard-timer                 -1
        tcp-subsq-guard-timer                   -1
        sip-isup-profile                        
        match-media-profiles                    
        qos-constraint                          
        block-rtcp                              disabled
        hide-egress-media-update                disabled
        tcp-media-profile                       
        monitoring-filters                      
        node-functionality                      
        default-location-string                 
        alt-family-realm                        
        pref-addr-type                          none
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:43

(realm-config)# exit
(media-manager)# steering-pool
(steering-pool)# ip-address 10.80.1.244
(steering-pool)# start-port 10000
(steering-pool)# end-port 29999
(steering-pool)# realm-id epc
(steering-pool)# network-interface ext:0
(steering-pool)# done
steering-pool
        ip-address                              10.80.1.244
        start-port                              10000
        end-port                                29999
        realm-id                                epc
        network-interface                       ext:0
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:43

(steering-pool)# ip-address 10.80.1.243
(steering-pool)# start-port 30000
(steering-pool)# end-port 49999
(steering-pool)# realm-id csm
(steering-pool)# network-interface in:0
(steering-pool)# done
steering-pool
        ip-address                              10.80.1.243
        start-port                              30000
        end-port                                49999
        realm-id                                csm
        network-interface                       in:0
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:43

(steering-pool)# exit
(media-manager)# media-manager
(media-manager-config)# state enabled
(media-manager-config)# latching enabled
(media-manager-config)# initial-guard-timer 300
(media-manager-config)# flow-time-limit 86400
(media-manager-config)# subsq-guard-timer 300
(media-manager-config)# tcp-flow-time-limit 86400
(media-manager-config)# tcp-initial-guard-timer 300
(media-manager-config)# done
media-manager
        state                                   enabled
        latching                                enabled
        flow-time-limit                         86400
        initial-guard-timer                     300
        subsq-guard-timer                       300
        tcp-flow-time-limit                     86400
        tcp-initial-guard-timer                 300
        tcp-subsq-guard-timer                   300
        tcp-number-of-ports-per-flow            2
        hnt-rtcp                                disabled
        algd-log-level                          NOTICE
        mbcd-log-level                          NOTICE
        options                                 
        red-flow-port                           1985
        red-mgcp-port                           1986
        red-max-trans                           10000
        red-sync-start-time                     5000
        red-sync-comp-time                      1000
        media-policing                          enabled
        max-arp-rate                            10
        max-signaling-packets                   0
        max-untrusted-signaling                 100
        min-untrusted-signaling                 30
        tolerance-window                        30
        trap-on-demote-to-deny                  disabled
        trap-on-demote-to-untrusted             disabled
        syslog-on-demote-to-deny                disabled
        syslog-on-demote-to-untrusted           disabled
        rtcp-rate-limit                         0
        anonymous-sdp                           disabled
        rfc2833-timestamp                       disabled
        default-2833-duration                   100
        rfc2833-end-pkts-only-for-non-sig       enabled
        translate-non-rfc2833-event             disabled
        media-supervision-traps                 disabled
        dnsalg-server-failover                  disabled
        syslog-on-call-reject                   disabled
        xcode-fax-max-rate                      9600
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-07-13 07:02:43

(media-manager-config)# exit
(media-manager)# exit
(configure)# exit
# save-config
checking configuration
--------------------------------------------------------------------------------
Results of config verification:
   2 configuration errors
Run 'verify-config' for more details
--------------------------------------------------------------------------------
Save-Config received, processing.
waiting for request to finish
Request to 'SAVE-CONFIG' has Finished, 
Save complete
Currently active and saved configurations do not match!
To sync &amp; activate, run 'activate-config' or 'reboot activate'.
# reboot activate

--------------------------------------------------------
WARNING: you are about to reboot this SBC!
--------------------------------------------------------

Reboot this SBC [y/n]?: y

Connection to 172.18.0.126 closed by remote host.
Connection to 172.18.0.126 closed.
[root@controller ~(keystone_admin)]#</msg>
<status status="PASS" endtime="20180713 12:42:19.516" starttime="20180713 12:42:19.516"></status>
</kw>
<status status="PASS" endtime="20180713 12:42:19.516" starttime="20180713 12:40:20.930"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******SBC configuration is successfull*******</arg>
</arguments>
<status status="PASS" endtime="20180713 12:42:19.516" starttime="20180713 12:42:19.516"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******Reboot VM to Activate the Configuration*******</arg>
</arguments>
<status status="PASS" endtime="20180713 12:42:19.516" starttime="20180713 12:42:19.516"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>60</arg>
</arguments>
<msg timestamp="20180713 12:43:19.521" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20180713 12:43:19.521" starttime="20180713 12:42:19.516"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******Reboot Completed *******</arg>
</arguments>
<status status="PASS" endtime="20180713 12:43:19.521" starttime="20180713 12:43:19.521"></status>
</kw>
<status status="PASS" endtime="20180713 12:43:19.521" starttime="20180713 12:35:41.150"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>***SBC Configuration Done***</arg>
</arguments>
<status status="PASS" endtime="20180713 12:43:19.521" starttime="20180713 12:43:19.521"></status>
</kw>
<kw type="teardown" name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20180713 12:43:19.646" starttime="20180713 12:43:19.521"></status>
</kw>
<doc>Verify the Cloud environment (RHOSP) before we start Onboarding of VNF VM’s process.</doc>
<tags>
<tag>Onboard</tag>
</tags>
<status status="PASS" endtime="20180713 12:43:19.646" critical="yes" starttime="20180713 12:31:39.897"></status>
</test>
<status status="PASS" endtime="20180713 12:43:19.646" starttime="20180713 12:31:35.692"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="1">Critical Tests</stat>
<stat fail="0" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">Onboard</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="SBC Onboarding TestCases" pass="1">SBC Onboarding TestCases</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
